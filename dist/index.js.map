{"version":3,"file":"index.js","mappings":"w0BAAA,OACA,kBACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,WACA,YACA,YACA,YACA,YASMA,GAAM,eAEZA,EAAIC,KAAI,gBAEK,EAAAC,QAA6B,gBAAnBF,EAAIG,IAAI,OAE/BH,EAAIC,KAAI,aAAO,QAEfD,EAAIC,KAAI,aAAK,CAACG,OAAQ,CAAC,UAAIC,kBAAmBC,aAAa,KAE3DN,EAAIC,IAAI,UAAQM,QAChBP,EAAIC,IAAI,UAAQO,WAAW,CAACC,UAAU,KAEtCT,EAAIC,KAAI,aAAa,UAAIS,gBAEzBV,EAAIG,IAAI,KAAK,CAACQ,EAAKC,IAAQA,EAAIC,OAAO,KAAKC,KAtBvB,iTAuBpBd,EAAIC,IAAI,QAAS,WACjBD,EAAIC,IAAI,SAAU,WAClBD,EAAIC,IAAI,YAAa,WACrBD,EAAIC,IAAI,WAAY,WACpBD,EAAIC,IAAI,aAAc,WACtBD,EAAIC,IAAI,UAAW,WACnBD,EAAIC,IAAI,YAAa,WACrBD,EAAIC,IAAI,WAAY,WAGpBD,EAAIC,IAAI,SAAU,WAGlBD,EAAIC,KAAI,CAACU,EAAKC,EAAKG,IAASA,GAAK,aAAgB,IAAK,yBAItDf,EAAIC,KAAI,CAACe,EAAgBL,EAAcC,EAAeG,KACpDE,QAAQD,MAAMA,GACd,IAAIE,EAAe,4BACfC,EAAa,KAEb,IAAAC,aAAYJ,KACdG,EAAaH,EAAMH,OACnBK,EAAeF,EAAMK,SAEvBT,EAAIC,OAAOM,GAAYZ,KAAKW,EAAa,IAG3C,UAAelB,C,sdCtEf,eACA,YACA,SAEA,YAQA,WAAe,IAAAsB,YAAW,CAClB,SAAAC,CAAUZ,EAAKC,G,yCACnB,MAAMY,QAAe,UAAOC,MAAMC,WAElCd,EAAIC,OAAO,KAAKN,KAAKiB,EACvB,G,EAEM,QAAAG,CAAShB,EAA4BC,G,yCACzC,MAAM,GAACgB,GAAMjB,EAAIkB,OAEXJ,QAAc,UAAOA,MAAMK,WAAW,CAACC,MAAO,CAACH,QAErD,IAAKH,EAAO,MAAM,aAAgB,uBAElC,OAAOb,EAAIC,OAAO,KAAKN,KAAKkB,EAC9B,G,EAGM,QAAAO,CAASrB,EAA6BC,G,yCAE1C,MAAM,MAACqB,EAAK,SAAEC,EAAQ,aAAEC,GAAgBxB,EAAIyB,KAE5C,IAAKzB,EAAI0B,KAAM,MAAM,aAAgB,IAAK,oBAG1C,MAAMC,EAAa3B,EAAI0B,KAAKE,OAEtBC,QAAiB,IAAAC,cAAaH,EAAY,OAAQ,qBAElD,WAACI,EAAU,UAAEC,EAAS,MAAEC,GAASJ,QAEjC,UAAOf,MAAMoB,OAAO,CACxBC,KAAM,CACJC,KAAML,EACNR,WACAC,aAAc,IAAIa,KAAKb,GACvBc,KAAML,EACNM,QAASP,EACTV,WAIJrB,EAAIC,OAAO,KAAKN,KAAK,cACvB,G,EAEM,WAAA4C,CAAYxC,EAA4BC,G,yCAC5C,MAAM,GAACgB,GAAMjB,EAAIkB,OAEXJ,QAAc,UAAOA,MAAMK,WAAW,CAACC,MAAO,CAACH,QAErD,IAAKH,EAAO,MAAM,aAAgB,IAAK,mBAEvC,MAAM2B,QAAqB,UAAO3B,MAAM4B,OAAO,CAACtB,MAAO,CAACH,GAAIH,EAAMG,MAElE,IAAKwB,EACH,MAAM,aAAgB,2CAQxB,aANM,EAAAE,WAAWC,SAASC,QAAQJ,EAAaF,QAAS,CACtDO,YAAY,EACZC,cAAe,UAIV9C,EAAIC,OAAO,KAAKN,KAAK,gBAC9B,G,yzBC3EF,eACA,YACA,YASA,WAAe,IAAAe,YAAW,CAClB,WAAAqC,CAAYhD,EAAoCC,G,yCACpD,MAAM,QAACgD,EAAO,MAAEC,EAAK,eAAEC,GAAkBnD,EAAIyB,KAM7C,SAJ6B,UAAO2B,SAASjC,WAAW,CACtDC,MAAO,CAACiC,6BAA8B,CAACJ,UAASC,QAAOC,qBAGrC,MAAM,aAAgB,IAAK,mBAI/C,aAFM,UAAOC,SAASlB,OAAO,CAACC,KAAMnC,EAAIyB,OAEjCxB,EAAIC,OAAO,KAAKC,KAAK,qBAC9B,G,EAEM,YAAAmD,CAAatD,EAAKC,G,yCACtB,MAAMsD,QAAkB,UAAOH,SAASrC,WAExC,OAAOd,EAAIC,OAAO,KAAKN,KAAK2D,EAC9B,G,EAEM,WAAAC,CAAYxD,EAA4BC,G,yCAC5C,MAAM,GAACgB,GAAMjB,EAAIkB,OAEXkC,QAAiB,UAAOA,SAASjC,WAAW,CAChDC,MAAO,CAACH,MACRwC,QAAS,CAACC,UAAU,KAGtB,IAAKN,EAAU,MAAM,aAAgB,2BAErC,OAAOnD,EAAIC,OAAO,KAAKN,KAAKwD,EAC9B,G,EAEM,cAAAO,CAAe3D,EAA8CC,G,yCACjE,MAAM,GAACgB,GAAMjB,EAAIkB,OAEXkC,QAAiB,UAAOA,SAASjC,WAAW,CAACC,MAAO,CAACH,QAE3D,IAAKmC,EAAU,MAAM,aAAgB,IAAK,sBAE1C,MAAOnC,GAAI2C,GAAuBR,EAARS,EAAI,EAAIT,EAA5B,QAON,aALM,UAAOA,SAASU,OAAO,CAC3B1C,MAAO,CAACH,GAAImC,EAASnC,IACrBkB,KAAM,OAAF,wBAAM0B,GAAS7D,EAAIyB,QAGlBxB,EAAIC,OAAO,KAAKC,KAAK,2BAC9B,G,0dC7DF,eAEA,YACA,YACA,SAYA,WAAe,IAAAQ,YAAW,CAClB,UAAAoD,CAAW/D,EAA+BC,G,yCAI9C,GAHAD,EAAIyB,KAAKuC,UAAY,IAAI3B,KAAKrC,EAAIyB,KAAKuC,WACvChE,EAAIyB,KAAKwC,QAAU,IAAI5B,KAAKrC,EAAIyB,KAAKwC,UAEhCjE,EAAI0B,KACP,MAAM,aAAgB,IAAK,kBAG7B,MAAM,OAACE,GAAU5B,EAAI0B,KAEfG,QAAiB,IAAAC,cAAaF,EAAQ,QAAS,sBAE/C,WAACG,EAAU,UAAEC,GAAaH,EAMhC,aAJM,UAAOqC,QAAQhC,OAAO,CAC1BC,KAAM,OAAF,wBAAMnC,EAAIyB,MAAI,CAAE0C,OAAQ,CAACpC,aAAYC,iBAGpC/B,EAAIC,OAAO,KAAKC,KAAK,6BAC9B,G,EAEM,WAAAiE,CAAYpE,EAAKC,G,yCACrB,MAAMoE,QAAiB,UAAOH,QAAQnD,WAEtC,OAAOd,EAAIC,OAAO,KAAKN,KAAKyE,EAC9B,G,EAEM,UAAAC,CAAWtE,EAA4BC,G,yCAC3C,MAAM,GAACgB,GAAMjB,EAAIkB,OAEXgD,QAAgB,UAAOA,QAAQ/C,WAAW,CAACC,MAAO,CAACH,QAEzD,OAAOhB,EAAIC,OAAO,KAAKN,KAAKsE,EAC9B,G,0dClDF,eAEA,YACA,YAQA,WAAe,IAAAvD,YAAW,CAClB,UAAA4D,CAAWvE,EAAqDC,G,yCACpE,MAAM,MAACuE,EAAK,IAAEC,GAAOzE,EAAIyB,MACnB,WAACmC,GAAc5D,EAAIkB,OAEnBkC,QAAiB,UAAOA,SAASjC,WAAW,CAChDC,MAAO,CAACH,GAAI2C,KAGd,IAAKR,EAAU,MAAM,aAAgB,IAAK,sBAM1C,SAJ4B,UAAOsB,QAAQvD,WAAW,CACpDC,MAAO,CAACuD,UAAW,CAACH,QAAOC,UAI3B,MAAM,aAAgB,IAAK,sCAI7B,aAFM,UAAOC,QAAQxC,OAAO,CAACC,KAAM,OAAF,wBAAMnC,EAAIyB,MAAI,CAAEmC,iBAE1C3D,EAAIC,OAAO,KAAKC,KAAK,yBAAyBiD,EAASF,QAChE,G,EACM,aAAA0B,G,yCAAiB,G,0dCjCzB,eAGA,YAQA,WAAe,IAAAjE,YAAW,CAClB,SAAAkE,CAAU7E,EAA8BC,G,yCAG5C,aAFM,UAAO6E,OAAO5C,OAAO,CAACC,KAAMnC,EAAIyB,OAE/BxB,EAAIC,OAAO,KAAKC,KAAK,eAC9B,G,0dCfF,eACA,YACA,YAOA,WAAe,IAAAQ,YAAW,CAClB,YAAAoE,CAAa/E,EAAiCC,G,yCAMlD,aAJM,UAAO+E,UAAU9C,OAAO,CAC5BC,KAAM,OAAF,wBAAMnC,EAAIyB,MAAI,CAAEwD,OAAQjF,EAAIkF,KAAKjE,OAGhChB,EAAIC,OAAO,KAAKC,KAAK,kBAC9B,G,EAEM,cAAAgF,CAAenF,EAAKC,G,yCACxB,MAAMmF,QAAoB,UAAOJ,UAAUjE,WAE3C,OAAOd,EAAIC,OAAO,KAAKN,KAAKwF,EAC9B,G,EAEM,YAAAC,CAAarF,EAA4BC,G,yCAC7C,MAAM,GAACgB,GAAMjB,EAAIkB,OAEX8D,QAAkB,UAAOA,UAAU7D,WAAW,CAACC,MAAO,CAACH,QAE7D,IAAK+D,EAAW,MAAM,aAAgB,IAAK,uBAE3C,OAAO/E,EAAIC,OAAO,KAAKN,KAAKoF,EAC9B,G,yzBCjCF,eACA,SACA,YACA,YACA,SACA,SACA,YACA,SAuBA,WAAe,IAAArE,YAAW,CAClB,QAAA2E,CAAStF,EAAKC,G,yCAClB,MAAMsF,QAAc,UAAOL,KAAKnE,SAAS,CAACK,MAAO,CAACoE,KAAM,UAExD,OAAOvF,EAAIC,OAAO,KAAKN,KAAK2F,EAC9B,G,EAEM,OAAAE,CAAQzF,EAA4BC,G,yCACxC,MAAM,GAACgB,GAAMjB,EAAIkB,OAEXgE,QAAa,UAAOA,KAAK/D,WAAW,CACxCC,MAAO,CAACH,MACRwC,QAAS,CAACL,SAAU,CAACsC,OAAQ,CAACxC,OAAO,OAGvC,OAAOjD,EAAIC,OAAO,KAAKN,KAAKsF,EAC9B,G,EAEM,QAAAS,CAAS3F,EAAkCC,G,yCAC/C,MAAM,MAAC2F,EAAK,SAAEC,EAAQ,YAAEC,GAAe9F,EAAIyB,KAM3C,SAJqB,UAAOyD,KAAKa,UAAU,CACzC3E,MAAO,CAAC4E,GAAI,CAAC,CAACJ,SAAQ,CAACE,mBAIvB,MAAM,aAAgB,IAAK,wCAE7B,MAAMG,QAAiB,IAAAC,MAAKL,EAAU,IAGhCX,QAAa,UAAOA,KAAKhD,OAAO,CACpCC,KAAM,OAAF,wBAAMnC,EAAIyB,MAAI,CAAEoE,SAAUI,EAAUT,KAAM,YAGzCI,MAAOO,EAAM,GAAElF,GAAMiE,EAEtBkB,EAAO,UAAOC,UAAU,IAAM,MAAMC,WAEpCC,QAAY,UAAOC,gBAAgBtE,OAAO,CAC9CC,KAAM,CACJ8C,OAAQhE,EACRwF,KAAML,EACNM,OAAQ,8BAIe,EAAAC,oBAAoBC,SAAS,CACtDC,KAAM,qBACNC,GAAI5B,EAAKU,MACTmB,QAAS,0BACTC,KAAM,+EAA+ET,EAAIE,gBACzFQ,QAAS,oBAGX,OAAOhH,EAAIC,OAAO,KAAKN,KAAK,CAC1Bc,QAAS,0CACTuE,OAAQhE,GAEZ,G,EAEM,WAAAiG,CAAYlH,EAA8BC,G,yCAC9C,MAAM,KAACwG,GAAQzG,EAAIyB,MAEb,GAACR,GAAMjB,EAAIkF,KAEXiC,QAAmB,UAAOX,gBAAgBrF,WAAW,CACzDC,MAAO,CAACgG,cAAe,CAACnC,OAAQhE,EAAIyF,OAAQ,yBAG9C,IAAKS,EACH,MAAM,aAAgB,IAAK,kCAE7B,GAAIA,EAAWV,OAASA,EACtB,MAAM,aAAgB,IAAK,uBAS7B,aAPM,UAAOvB,KAAKpB,OAAO,CACvB1C,MAAO,CAACH,MACRkB,KAAM,CAACkF,eAAe,WAGlB,UAAOb,gBAAgB9D,OAAO,CAACtB,MAAO,CAACH,GAAIkG,EAAWlG,MAErDhB,EAAIC,OAAO,KAAKC,KAAK,gCAC9B,G,EAGM,sBAAAmH,CAAuBtH,EAAKC,G,yCAChC,OAAOA,EAAIC,OAAO,KAAKN,KAAK,OAC9B,G,EAEM,KAAA2H,CAAMvH,EAA8CC,G,yCACxD,MAAM,MAAC2F,EAAK,SAAEC,GAAY7F,EAAIyB,MAExB,MAAC+F,GAASxH,EAAIyH,MAEdvC,QAAa,UAAOA,KAAK/D,WAAW,CAACC,MAAO,CAACwE,WAEnD,IAAKV,EAAM,MAAM,aAAgB,IAAK,6BAEtC,GAAa,QAATsC,GAAgC,SAAbtC,EAAKM,KAC1B,MAAM,aAAgB,IAAK,yBAI7B,WAF4B,IAAAkC,SAAQ7B,EAAUX,EAAKW,WAE/B,MAAM,aAAgB,IAAK,6BAE/C,IAAKX,EAAKmC,cACR,MAAM,aAAgB,IAAK,4BAE7B,MAAMM,GAAQ,IAAAC,MACRC,EAAW,IAAIxF,MAAK,IAAIA,MAAOyF,UAAY,SAG3CC,QAAkB,UAAOA,UAAU7F,OAAO,CAC9CC,KAAM,CACJ8C,OAAQC,EAAKjE,GACb0G,QACAK,UAAWH,MAIRhC,SAAUoC,EAAC,cAAEZ,EAAa,KAAE7B,EAAI,UAAE0C,GAAsBhD,EAARrB,EAAI,EAAIqB,EAAzD,iDAGN,MAAiB,SAAbA,EAAKM,KACAvF,EACJkI,OAAO,oBAAqBJ,EAAUJ,MAAO,CAC5CS,QAAQ,EACRC,OAAQ,UAETnI,OAAO,KACPC,KAAK,qBAERF,EAAIqI,UAAU,gBAAiB,UAAUP,EAAUJ,SAG9C1H,EAAIC,OAAO,KAAKN,KAAK,CAACc,QAAS,iBAAkBwE,KAAMrB,IAChE,G,EAEM,qBAAA0E,CAAsBvI,EAAyCC,G,yCACnE,MAAM,MAAC2F,GAAS5F,EAAIyB,KAEdyD,QAAa,UAAOA,KAAK/D,WAAW,CAACC,MAAO,CAACwE,WAEnD,IAAKV,EAAM,MAAM,aAAgB,IAAK,kBAEtC,MAAMkB,EAAO,UAAOC,UAAU,IAAM,MAAMC,WAEpCC,QAAY,UAAOC,gBAAgBtE,OAAO,CAC9CC,KAAM,CACJ8C,OAAQC,EAAKjE,GACbwF,KAAML,EACNM,OAAQ,oBAIZ,IAAKH,EAAK,MAAM,aAAgB,IAAK,4CAEV,EAAAI,oBAAoBC,SAAS,CACtDC,KAAM,qBACNC,GAAI5B,EAAKU,MACTmB,QAAS,sBACTC,KAAM,6EAA6ET,EAAIE,gBACvFQ,QAAS,oBAGX,OAAOhH,EAAIC,OAAO,KAAKN,KAAK,wCAC9B,G,EAEM,uBAAA4I,CAAwBxI,EAA8BC,G,yCAC1D,MAAM,KAACwG,EAAI,OAAExB,GAAUjF,EAAIyB,KAErB8E,QAAY,UAAOC,gBAAgBT,UAAU,CACjD3E,MAAO,CAACqF,OAAMxB,SAAQyB,OAAQ,oBAGhC,IAAKH,EAAK,MAAM,aAAgB,IAAK,kCAErC,GAAIE,IAASF,EAAIE,KACf,MAAM,aAAgB,IAAK,2BAE7B,OAAOxG,EAAIC,OAAO,KAAKN,KAAK,WAC9B,G,EAEM,cAAA6I,CAAezI,EAAsCC,G,yCACzD,MAAM,SAAC4F,GAAY7F,EAAIyB,MAEjB,GAACR,GAAMjB,EAAIkF,KAEXe,QAAiB,IAAAC,MAAKL,EAAU,IAItC,aAFM,UAAOX,KAAKpB,OAAO,CAAC1C,MAAO,CAACH,MAAKkB,KAAM,CAAC0D,SAAUI,KAEjDhG,EAAIC,OAAO,KAAKN,KAAK,mBAC9B,G,EAGM,aAAA8I,CAAc1I,EAAkCC,G,yCACpD,MAAM,GAACgB,GAAMjB,EAAIkF,KAEjB,IAAI/C,EAAOnC,EAAIyB,KAEf,GAAIzB,EAAI0B,KAAM,CACZ,MAAM,OAACE,GAAU5B,EAAI0B,KACjB1B,EAAIkF,KAAKyD,IAAI3G,kBACT,EAAAW,WAAWC,SAASC,QAAQ7C,EAAIkF,KAAKyD,IAAI3G,UAAW,CACxDc,YAAY,UAER,UAAOoC,KAAKpB,OAAO,CAAC1C,MAAO,CAACH,MAAKkB,KAAM,CAACwG,IAAK,SAErD,MAAM9G,QAAiB,IAAAC,cAAaF,EAAQ,QAAS,mBAC/C,WAACG,EAAU,UAAEC,GAAaH,EAChCM,EAAO,OAAH,wBAAOnC,EAAIyB,MAAI,CAAEkH,IAAK,CAAC5G,aAAYC,cACzC,CAIA,aAFM,UAAOkD,KAAKpB,OAAO,CAAC1C,MAAO,CAACH,MAAKkB,SAEhClC,EAAIC,OAAO,KAAKN,KAAK,0BAC9B,G,EAEM,MAAAgJ,CAAO5I,EAAKC,G,+CACVD,EAAI4I,SAEV3I,EAAIC,OAAO,KAAKC,KAAK,oBACvB,G,8JChQF,kBAGM0I,EAFN,UAEa,QAAIA,KAEjB,UAAIC,OAAOD,GAAM,IAAMvI,QAAQyI,IAAI,qBAAuBF,I,mgBCL1D,kBACA,YACA,SAGMD,GAAS,IAAAI,eAAa,CAAOhJ,EAAKC,EAAKG,IAAS,OAAD,6BACnDJ,EAAI4I,OAAS,IAAY,OAAD,6BACtB,MAAM,cAACK,GAAiBjJ,EAAIkJ,QAEtBvB,GACJsB,aAAa,EAAbA,EAAeE,MAAM,KAAK,KAAMnJ,EAAIoJ,cAAc,qBAEpD,IAAKzB,EAAO,OAAO,EAEnB,MAAMI,QAAkB,UAAOA,UAAU5G,WAAW,CAACC,MAAO,CAACuG,WAE7D,IAAKI,EAAW,OAAO,QAEJ,UAAO7C,KAAK/D,WAAW,CAACC,MAAO,CAACH,GAAI8G,EAAU9C,UAIjE,aAFM,UAAO8C,UAAUrF,OAAO,CAACtB,MAAO,CAACuG,MAAOI,EAAUJ,UAEjD,CACT,IACA1H,EAAIoJ,YAAY,qBAChBjJ,GACF,MAkFkC,EAAAwI,OAAAA,EA3ElC,MAAMU,GAAa,IAAAN,eAAa,CAAOhJ,EAAwBC,EAAKG,IAAS,OAAD,6BAC1E,MAAM6E,EAASjF,EAAIyB,KAAKwD,QAAUjF,EAAIkB,OAAO+D,OAE7C,IAAKA,EAAQ,MAAM,aAAgB,IAAK,cAExC,MAAMC,QAAa,UAAOA,KAAK/D,WAAW,CAACC,MAAO,CAACH,GAAIgE,KAEvD,IAAKC,EAAM,MAAM,aAAgB,IAAK,kBAEtClF,EAAIkF,KAAOA,EAEX9E,GACF,MA+DQ,EAAAkJ,WAAAA,EA5DR,MAAMC,GAAe,IAAA5I,YAAW,CACxB,IAAAuE,CAAKlF,EAAKC,EAAKG,G,yCACnB,MAAM,cAAC6I,GAAiBjJ,EAAIkJ,QAEtBvB,EAAQsB,aAAa,EAAbA,EAAeE,MAAM,KAAK,GAExC,IAAKxB,EAAO,MAAM,aAAgB,IAAK,gBAEvC,MAAMI,QAAkB,UAAOA,UAAU5G,WAAW,CAACC,MAAO,CAACuG,WAE7D,IAAKI,EAAW,MAAM,aAAgB,IAAK,mBAE3C,MAAM7C,QAAa,UAAOA,KAAK/D,WAAW,CAACC,MAAO,CAACH,GAAI8G,EAAU9C,UAEjE,IAAKC,EAAM,MAAM,aAAgB,IAAK,kBAEtC,MAAM2C,EAAW,IAAIxF,MAAK,IAAIA,MAAOyF,UAAY,eAE3C,UAAOC,UAAUjE,OAAO,CAC5B1C,MAAO,CAAC6D,OAAQC,EAAKjE,IACrBkB,KAAM,CAAC6F,UAAWH,KAGpB7H,EAAIkF,KAAOA,EAEX9E,GACF,G,EAEAoH,MAAO,CAAOxH,EAAKC,EAAKG,IAAS,OAAD,6BAC9B,MAAMuH,EAAQ3H,EAAIoJ,cAAc,qBAEhC,IAAKzB,EAAO,MAAM,aAAgB,IAAK,gBAEvC,MAAMI,QAAkB,UAAOA,UAAU5G,WAAW,CAACC,MAAO,CAACuG,WAE7D,IAAKI,EAGH,MAFA9H,EAAIoJ,YAAY,sBAEV,aAAgB,IAAK,mBAG7B,MAAMnE,QAAa,UAAOA,KAAK/D,WAAW,CAACC,MAAO,CAACH,GAAI8G,EAAU9C,UAEjE,IAAKC,EAAM,MAAM,aAAgB,IAAK,kBAEtC,GAAiB,SAAbA,EAAKM,KAAiB,MAAM,aAAgB,IAAK,gBAErD,MAAMqC,EAAW,IAAIxF,MAAK,IAAIA,MAAOyF,UAAY,eAE3C,UAAOC,UAAUjE,OAAO,CAC5B1C,MAAO,CAAC6D,OAAQC,EAAKjE,IACrBkB,KAAM,CAAC6F,UAAWH,KAGpB7H,EAAIkF,KAAOA,EAEX9E,GACF,MAGkB,EAAAmJ,aAAAA,C,2JC5GpB,eACA,WACA,YAEMC,GAAS,aAAO,CAACC,QAAS,UAAOC,kBAEjCC,GAAS,IAAAC,UAGfD,EAAOnK,IAAI,IAAK,UAAWoB,WAE3B+I,EAAOnK,IAAI,OAAQ,UAAWwB,UAG9B2I,EAAOE,KAAK,IAAKL,EAAOM,OAAO,SAAU,UAAWzI,UAEpDsI,EAAOjH,OAAO,OAAQ,UAAWF,aAEjC,UAAemH,C,iEClBf,MAGMA,GAAS,EAHf,OAGeC,UAEf,UAAeD,C,2JCLf,eACA,YACA,SAEMA,GAAS,IAAAC,UAGfD,EAAOnK,IAAI,IAAK,UAAW8D,cAE3BqG,EAAOnK,IAAI,OAAQ,UAAWgE,aAE9BmG,EAAOE,KAAK,IAAK,EAAAN,aAAa/B,MAAO,UAAWxE,aAEhD2G,EAAOI,MAAM,OAAQ,EAAAR,aAAa/B,MAAO,UAAW7D,gBAEpD,UAAegG,C,2JCff,eACA,YACA,SACA,aAEM,MAACnC,GAAS,EAAA+B,aAEVC,GAAS,aAAO,CAACC,QAAS,UAAOC,kBAEjCC,GAAS,IAAAC,UAEfD,EAAOnK,IAAI,IAAK,UAAW4E,aAE3BuF,EAAOnK,IAAI,OAAQ,UAAW8E,YAE9BqF,EAAOE,KAAK,IAAKrC,EAAOgC,EAAOM,OAAO,UAAW,UAAW/F,YAE5D,UAAe4F,C,2JCjBf,eACA,YAEMA,GAAS,IAAAC,UAEfD,EAAOE,KAAK,eAAgB,UAAWtF,YAGvCoF,EAAOI,MAAM,QAEb,UAAeJ,C,0JCVf,eACA,YAEMA,GAAS,IAAAC,UAEfD,EAAOE,KAAK,IAAK,UAAWhF,WAE5B,UAAe8E,C,2JCPf,eACA,YACA,SAEMA,GAAS,IAAAC,UAEfD,EAAOrK,IAAI,EAAAiK,aAAarE,MAExByE,EAAOnK,IAAI,IAAK,UAAW2F,gBAE3BwE,EAAOnK,IAAI,OAAQ,UAAW6F,cAE9BsE,EAAOE,KAAK,IAAK,UAAW9E,cAE5B,UAAe4E,C,2JCdf,eACA,YACA,SACA,aAEM,KAACzE,EAAI,MAAEsC,GAAS,EAAA+B,aAEhBC,GAAS,aAAO,CAACC,QAAS,UAAOC,kBAEjCC,GAAS,IAAAC,UAEfD,EAAOrK,IAAI,EAAAsJ,QAEXe,EAAOnK,IAAI,IAAKgI,EAAO,UAAWlC,UAElCqE,EAAOnK,IAAI,OAAQgI,EAAO,UAAW/B,SAErCkE,EAAOE,KAAK,YAAa,UAAWlE,UAEpCgE,EAAOE,KAAK,SAAU,UAAWtC,OAEjCoC,EAAOI,MAAM,gBAAiB7E,EAAMsE,EAAOM,OAAO,OAAQ,UAAWpB,eAErEiB,EAAOE,KAAK,uBAAwB,UAAWtB,uBAE/CoB,EAAOE,KAAK,yBAA0B,UAAWrB,yBAEjDmB,EAAOK,IAAI,kBAAmB,EAAAV,WAAY,UAAWb,gBAErDkB,EAAOE,KAAK,gBAAiB,EAAAP,WAAY,UAAWpC,aAIpDyC,EAAOE,KAAK,UAAW,UAAWjB,QAElC,UAAee,C,iECnCf,eACA,SAIMA,GAAS,IAAAC,UAEfD,EAAOnK,IAAI,KAAK,CAACQ,EAAKC,KACpB,MAAM0H,GAAQ,IAAAC,MACd3H,EAAIE,KAAKwH,EAAM,IAmBjB,UAAegC,C,8LC5Bf,kBACA,SAgCQ,0EAhCyB,IAAU,IAC3C,kBAEA,KAAWM,OAAO,CAChBC,WAAY,UAAIC,WAChBC,QAAS,UAAIC,cACbC,WAAY,UAAIC,iBAChBC,QAAQ,IAyBU,EAAA1I,aAbe,CAACH,EAAY8I,EAAcC,IACrD,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAM/F,EAAS,KAAWlC,SAASkI,cACjC,CAACJ,SAAQ3H,cAAe0H,IACxB,CAACpK,EAAO0K,KACF1K,EAAOwK,EAAOxK,GACbuK,EAAQG,EAAO,IAGxB,UAAYC,iBAAiBrJ,GAAYsJ,KAAKnG,EAAO,G,iEC7BzD,eAEA,IAAIoG,EAMCC,OAAOC,WACVD,OAAOC,SAAW,IAAI,EAAAC,cAGxBH,EAASC,OAAOC,SAEhB,UAAeF,C,iECdf,eAEA,WAAe,IAAAI,UAASC,QAAQC,IAAK,CACnC3C,MAAM,IAAA4C,QACNC,YAAY,IAAAC,OACZC,aAAa,IAAAhG,SACbiG,gBAAgB,IAAAF,OAChBxB,YAAY,IAAAwB,OACZtB,eAAe,IAAAsB,OACfpB,kBAAkB,IAAAoB,OAClB5L,eAAe,IAAA4L,OACfjM,kBAAkB,IAAAiM,Q,wLCXpB,kBACA,YACA,YACA,YAEMG,EAAc,UAAWC,gBAAgB,CAC7CrH,QAAS,QACT+G,KAAM,IACNjB,QAAQ,EACRwB,KAAM,CACJ9G,KAAM,UAAI0G,YACVK,KAAM,UAAIJ,kBAIS,EAAAlF,oBAAA,EAEvB,MAAMuF,EAA2D,CAC/DC,WAAY,CACVC,QAAS,cACTC,YAAa,UAAKzB,QAAQ0B,UAAW,qBACrCC,eAAe,GAEjBC,SAAU,UAAK5B,QAAQ0B,UAAW,YAClCG,QAAS,eAGXX,EAAYxM,IAAI,WAAW,aAAI4M,IAE/B,UAAeJ,C,waCpBF,EAAA9C,aAAgB0D,GACpB,CAAO1M,EAAcC,EAAeG,IAAuB,OAAD,6BAC/D,UACQsM,EAAG1M,EAAKC,EAAKG,EACrB,CAAE,MAAOC,GACPD,EAAKC,EACP,CACF,IAKW,EAAAM,WACXgM,IAEA,IAAK,IAAIC,KAAOC,OAAOC,KAAKH,GAC1BA,EAAYC,IAAO,IAAA5D,cAAa2D,EAAYC,IAE9C,OAAOD,CAAW,C,UC3BpBI,EAAOC,QAAUC,QAAQ,iB,UCAzBF,EAAOC,QAAUC,QAAQ,W,UCAzBF,EAAOC,QAAUC,QAAQ,a,UCAzBF,EAAOC,QAAUC,QAAQ,gB,UCAzBF,EAAOC,QAAUC,QAAQ,O,UCAzBF,EAAOC,QAAUC,QAAQ,gB,UCAzBF,EAAOC,QAAUC,QAAQ,U,UCAzBF,EAAOC,QAAUC,QAAQ,U,UCAzBF,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,c,SCAzBF,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,a,UCAzBF,EAAOC,QAAUC,QAAQ,gC,UCAzBF,EAAOC,QAAUC,QAAQ,c,UCAzBF,EAAOC,QAAUC,QAAQ,O,UCAzBF,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,GAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUI,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,OACf,ECnB0BG,CAAoB,I","sources":["webpack://vootv-api/./src/app.config.ts","webpack://vootv-api/./src/controllers/audio.ts","webpack://vootv-api/./src/controllers/location.ts","webpack://vootv-api/./src/controllers/program.ts","webpack://vootv-api/./src/controllers/service.ts","webpack://vootv-api/./src/controllers/stream.ts","webpack://vootv-api/./src/controllers/testimony.ts","webpack://vootv-api/./src/controllers/user.ts","webpack://vootv-api/./src/index.ts","webpack://vootv-api/./src/middlewares/auth.ts","webpack://vootv-api/./src/routes/audio.ts","webpack://vootv-api/./src/routes/download.ts","webpack://vootv-api/./src/routes/location.ts","webpack://vootv-api/./src/routes/program.ts","webpack://vootv-api/./src/routes/service.ts","webpack://vootv-api/./src/routes/stream.ts","webpack://vootv-api/./src/routes/testimony.ts","webpack://vootv-api/./src/routes/user.ts","webpack://vootv-api/./src/test/index.ts","webpack://vootv-api/./src/util/cloudinary.config.ts","webpack://vootv-api/./src/util/db.connection.ts","webpack://vootv-api/./src/util/env.ts","webpack://vootv-api/./src/util/nodemailer.config.ts","webpack://vootv-api/./src/util/requestHandler.config.ts","webpack://vootv-api/external commonjs \"@prisma/client\"","webpack://vootv-api/external commonjs \"bcryptjs\"","webpack://vootv-api/external commonjs \"cloudinary\"","webpack://vootv-api/external commonjs \"cookie-parser\"","webpack://vootv-api/external commonjs \"cors\"","webpack://vootv-api/external commonjs \"dotenv/config\"","webpack://vootv-api/external commonjs \"envalid\"","webpack://vootv-api/external commonjs \"express\"","webpack://vootv-api/external commonjs \"helmet\"","webpack://vootv-api/external commonjs \"http-errors\"","webpack://vootv-api/external commonjs \"morgan\"","webpack://vootv-api/external commonjs \"multer\"","webpack://vootv-api/external commonjs \"nodemailer\"","webpack://vootv-api/external commonjs \"nodemailer-express-handlebars\"","webpack://vootv-api/external commonjs \"streamifier\"","webpack://vootv-api/external commonjs \"uuid\"","webpack://vootv-api/external node-commonjs \"crypto\"","webpack://vootv-api/external node-commonjs \"path\"","webpack://vootv-api/webpack/bootstrap","webpack://vootv-api/webpack/startup"],"sourcesContent":["import 'dotenv/config';\r\nimport express, {Request, Response, NextFunction} from 'express';\r\nimport morgan from 'morgan';\r\nimport cors from 'cors';\r\nimport helmet from 'helmet';\r\nimport cookieParser from 'cookie-parser';\r\nimport createHttpError, {isHttpError} from 'http-errors';\r\nimport userRoutes from './routes/user';\r\nimport audioRoutes from './routes/audio';\r\nimport locationRoutes from './routes/location';\r\nimport serviceRoutes from './routes/service';\r\nimport testimonyRoutes from './routes/testimony';\r\nimport streamRoutes from './routes/stream';\r\nimport downloadRoutes from './routes/download';\r\nimport programRoutes from './routes/program';\r\nimport testRoutes from './test';\r\nimport env from './util/env';\r\n\r\nconst homeMessage = `\r\n  <div style=\"display: flex; align-items: center; justify-content: center; height: 90vh\"> \r\n    <h1 style=\"font-size: 72px; background: -webkit-linear-gradient(45deg, #09009f, #00ff95 80%); -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\">VOO TV REST API</h1>\r\n  </div>\r\n`;\r\n\r\nconst app = express();\r\n\r\napp.use(helmet());\r\n\r\nexport const devMode = app.get('env') === 'development';\r\n\r\napp.use(morgan('dev'));\r\n\r\napp.use(cors({origin: [env.ADMIN_CLIENT_URL], credentials: true}));\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({extended: true}));\r\n\r\napp.use(cookieParser(env.COOKIE_SECRET));\r\n\r\napp.get('/', (req, res) => res.status(200).send(homeMessage));\r\napp.use('/user', userRoutes);\r\napp.use('/audio', audioRoutes);\r\napp.use('/location', locationRoutes);\r\napp.use('/service', serviceRoutes);\r\napp.use('/testimony', testimonyRoutes);\r\napp.use('/stream', streamRoutes);\r\napp.use('/download', downloadRoutes);\r\napp.use('/program', programRoutes);\r\n\r\n//? FOR TESTS\r\napp.use('/tests', testRoutes);\r\n\r\n//Not found\r\napp.use((req, res, next) => next(createHttpError(404, 'Endpoint not found')));\r\n\r\n//Error Middleware\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\napp.use((error: unknown, req: Request, res: Response, next: NextFunction) => {\r\n  console.error(error);\r\n  let errorMessage = 'An unknown error occurred';\r\n  let statusCode = 500;\r\n  //Todo Handle prisma invalid id error\r\n  if (isHttpError(error)) {\r\n    statusCode = error.status;\r\n    errorMessage = error.message;\r\n  }\r\n  res.status(statusCode).json(errorMessage);\r\n});\r\n\r\nexport default app;\r\n","import {Controller} from '../util/requestHandler.config';\r\nimport createHttpError from 'http-errors';\r\nimport {uploadBuffer, cloudinary} from '../util/cloudinary.config';\r\nimport {Request} from 'express';\r\nimport prisma from '../util/db.connection';\r\n\r\ninterface Audio {\r\n  title: string;\r\n  timeRecorded: Date;\r\n  preacher: string;\r\n}\r\n\r\nexport default Controller({\r\n  async getAudios(req, res) {\r\n    const audios = await prisma.audio.findMany();\r\n\r\n    res.status(200).json(audios);\r\n  },\r\n\r\n  async getAudio(req: Request<{id: string}>, res) {\r\n    const {id} = req.params;\r\n\r\n    const audio = await prisma.audio.findUnique({where: {id}});\r\n\r\n    if (!audio) throw createHttpError(\"Audio doesn't exist\");\r\n\r\n    return res.status(200).json(audio);\r\n  },\r\n\r\n  //Todo Trim inputs\r\n  async addAudio(req: Request<{}, {}, Audio>, res) {\r\n    //Attach information in form\r\n    const {title, preacher, timeRecorded} = req.body;\r\n\r\n    if (!req.file) throw createHttpError(403, 'No file received');\r\n\r\n    // Get the uploaded file buffer and name\r\n    const fileBuffer = req.file.buffer;\r\n\r\n    const response = await uploadBuffer(fileBuffer, 'auto', 'vootv-api/audios');\r\n\r\n    const {secure_url, public_id, bytes} = response;\r\n\r\n    await prisma.audio.create({\r\n      data: {\r\n        link: secure_url,\r\n        preacher,\r\n        timeRecorded: new Date(timeRecorded),\r\n        size: bytes,\r\n        cloudId: public_id,\r\n        title\r\n      }\r\n    });\r\n\r\n    res.status(201).json('Audio added');\r\n  },\r\n\r\n  async deleteAudio(req: Request<{id: string}>, res) {\r\n    const {id} = req.params;\r\n\r\n    const audio = await prisma.audio.findUnique({where: {id}});\r\n\r\n    if (!audio) throw createHttpError(404, 'Audio not found');\r\n\r\n    const audioDeleted = await prisma.audio.delete({where: {id: audio.id}});\r\n\r\n    if (!audioDeleted)\r\n      throw createHttpError('Could not delete audio, try again later');\r\n\r\n    await cloudinary.uploader.destroy(audioDeleted.cloudId, {\r\n      invalidate: true,\r\n      resource_type: 'video'\r\n    });\r\n    // {result: 'not found'; }| {  result: 'ok';}\r\n\r\n    return res.status(200).json('Audio deleted');\r\n  }\r\n});\r\n","import {Request} from 'express';\r\nimport {Controller} from '../util/requestHandler.config';\r\nimport createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\ninterface LocationBody {\r\n  country: string;\r\n  state: string;\r\n  address: string;\r\n  pastorInCharge: string;\r\n  mapLocation?: {longitude: number; latitude: number};\r\n}\r\n\r\nexport default Controller({\r\n  async addLocation(req: Request<{}, {}, LocationBody>, res) {\r\n    const {country, state, pastorInCharge} = req.body;\r\n\r\n    const locationExists = await prisma.location.findUnique({\r\n      where: {country_state_pastorInCharge: {country, state, pastorInCharge}}\r\n    });\r\n\r\n    if (locationExists) throw createHttpError(403, 'Location exists');\r\n\r\n    await prisma.location.create({data: req.body});\r\n\r\n    return res.status(201).send('New location added');\r\n  },\r\n\r\n  async getLocations(req, res) {\r\n    const locations = await prisma.location.findMany();\r\n\r\n    return res.status(200).json(locations);\r\n  },\r\n\r\n  async getLocation(req: Request<{id: string}>, res) {\r\n    const {id} = req.params;\r\n\r\n    const location = await prisma.location.findUnique({\r\n      where: {id},\r\n      include: {services: true}\r\n    });\r\n\r\n    if (!location) throw createHttpError('Location does not exist');\r\n\r\n    return res.status(200).json(location);\r\n  },\r\n\r\n  async updateLocation(req: Request<{id: string}, {}, LocationBody>, res) {\r\n    const {id} = req.params;\r\n\r\n    const location = await prisma.location.findUnique({where: {id}});\r\n\r\n    if (!location) throw createHttpError(403, 'Location not found');\r\n\r\n    const {id: locationId, ...rest} = location;\r\n\r\n    await prisma.location.update({\r\n      where: {id: location.id},\r\n      data: {...rest, ...req.body}\r\n    });\r\n\r\n    return res.status(200).send('Location details updated');\r\n  }\r\n});\r\n","import {Controller} from '../util/requestHandler.config';\r\nimport {Request} from 'express';\r\nimport createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\nimport {uploadBuffer} from '../util/cloudinary.config';\r\n\r\ntype ProgramType = 'PROGRAM' | 'EVENT';\r\ninterface Program {\r\n  locationId: string;\r\n  theme: string;\r\n  startTime: Date;\r\n  endTime: Date;\r\n  additionalInfo: string;\r\n  type: ProgramType;\r\n}\r\n\r\nexport default Controller({\r\n  async addProgram(req: Request<{}, {}, Program>, res) {\r\n    req.body.startTime = new Date(req.body.startTime);\r\n    req.body.endTime = new Date(req.body.endTime);\r\n\r\n    if (!req.file) {\r\n      throw createHttpError(403, 'No Image added');\r\n    }\r\n\r\n    const {buffer} = req.file;\r\n\r\n    const response = await uploadBuffer(buffer, 'image', 'vootv-api/banners');\r\n\r\n    const {secure_url, public_id} = response;\r\n\r\n    await prisma.program.create({\r\n      data: {...req.body, banner: {secure_url, public_id}}\r\n    });\r\n\r\n    return res.status(201).send('Program Added successfully');\r\n  },\r\n\r\n  async getPrograms(req, res) {\r\n    const programs = await prisma.program.findMany();\r\n\r\n    return res.status(200).json(programs);\r\n  },\r\n\r\n  async getProgram(req: Request<{id: string}>, res) {\r\n    const {id} = req.params;\r\n\r\n    const program = await prisma.program.findUnique({where: {id}});\r\n\r\n    return res.status(200).json(program);\r\n  }\r\n});\r\n","import {Controller} from '../util/requestHandler.config';\r\nimport {Request} from 'express';\r\nimport createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\n\r\ninterface ServiceBody {\r\n  day: string;\r\n  startTimes: string[];\r\n  theme: string;\r\n}\r\n\r\nexport default Controller({\r\n  async addService(req: Request<{locationId: string}, {}, ServiceBody>, res) {\r\n    const {theme, day} = req.body;\r\n    const {locationId} = req.params;\r\n\r\n    const location = await prisma.location.findUnique({\r\n      where: {id: locationId}\r\n    });\r\n\r\n    if (!location) throw createHttpError(404, 'Location not found');\r\n\r\n    const serviceExists = await prisma.service.findUnique({\r\n      where: {theme_day: {theme, day}}\r\n    });\r\n\r\n    if (serviceExists)\r\n      throw createHttpError(403, 'Service exists, update to continue');\r\n\r\n    await prisma.service.create({data: {...req.body, locationId}});\r\n\r\n    return res.status(201).send(`Service added for RCN ${location.state}`);\r\n  },\r\n  async updateService() {}\r\n});\r\n","import {Controller} from '../util/requestHandler.config';\r\nimport {Request} from 'express';\r\nimport createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\n\r\ninterface Stream {\r\n  userId: string;\r\n  audioId: string;\r\n  duration: number;\r\n}\r\n\r\nexport default Controller({\r\n  async addStream(req: Request<{}, {}, Stream>, res) {\r\n    await prisma.stream.create({data: req.body});\r\n    \r\n    return res.status(201).send('Stream added');\r\n  }\r\n});\r\n","import {Request} from 'express';\r\nimport {Controller} from '../util/requestHandler.config';\r\nimport createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\n\r\ninterface Testimony {\r\n  title: string;\r\n  content: string;\r\n}\r\n\r\nexport default Controller({\r\n  async addTestimony(req: Request<{}, {}, Testimony>, res) {\r\n    \r\n    await prisma.testimony.create({\r\n      data: {...req.body, userId: req.user.id}\r\n    });\r\n\r\n    return res.status(201).send('Testimony added');\r\n  },\r\n\r\n  async getTestimonies(req, res) {\r\n    const testimonies = await prisma.testimony.findMany();\r\n\r\n    return res.status(201).json(testimonies);\r\n  },\r\n\r\n  async getTestimony(req: Request<{id: string}>, res) {\r\n    const {id} = req.params;\r\n    \r\n    const testimony = await prisma.testimony.findUnique({where: {id}});\r\n\r\n    if (!testimony) throw createHttpError(404, 'Testimony not found');\r\n\r\n    return res.status(200).json(testimony);\r\n  }\r\n});\r\n","import {Request} from 'express';\r\nimport {Controller} from '../util/requestHandler.config';\r\nimport {hash, compare} from 'bcryptjs';\r\nimport createHttpError from 'http-errors';\r\nimport crypto from 'crypto';\r\nimport {v4} from 'uuid';\r\nimport {default_transporter} from '../util/nodemailer.config';\r\nimport prisma from '../util/db.connection';\r\nimport {cloudinary, uploadBuffer} from '../util/cloudinary.config';\r\n\r\ninterface UserSchema {\r\n  email: string;\r\n  fullName: string;\r\n  password: string;\r\n  phoneNumber: string;\r\n  dateOfBirth?: Date;\r\n  locationId?: string;\r\n  avi?: {secure_url: string; public_id: string};\r\n}\r\n\r\ninterface Verify {\r\n  code: string;\r\n  userId: string;\r\n}\r\n\r\ntype ResetPasswordMail = Pick<UserSchema, 'email'>;\r\n\r\ntype ChangePassword = {password: string; userId: string};\r\n\r\ntype Login = Pick<UserSchema, 'email' | 'password'>;\r\n\r\nexport default Controller({\r\n  async getUsers(req, res) {\r\n    const users = await prisma.user.findMany({where: {role: 'USER'}});\r\n\r\n    return res.status(200).json(users);\r\n  },\r\n\r\n  async getUser(req: Request<{id: string}>, res) {\r\n    const {id} = req.params;\r\n\r\n    const user = await prisma.user.findUnique({\r\n      where: {id},\r\n      include: {location: {select: {state: true}}}\r\n    });\r\n\r\n    return res.status(200).json(user);\r\n  },\r\n\r\n  async register(req: Request<{}, {}, UserSchema>, res) {\r\n    const {email, password, phoneNumber} = req.body;\r\n\r\n    const exists = await prisma.user.findFirst({\r\n      where: {OR: [{email}, {phoneNumber}]}\r\n    });\r\n\r\n    if (exists)\r\n      throw createHttpError(403, 'Account already exists, please login');\r\n\r\n    const hashedPW = await hash(password, 10);\r\n\r\n    //* Add role of user by default\r\n    const user = await prisma.user.create({\r\n      data: {...req.body, password: hashedPW, role: 'USER'}\r\n    });\r\n\r\n    const {email: _email, id} = user;\r\n\r\n    const rand = crypto.randomInt(1000, 9999).toString();\r\n\r\n    const otp = await prisma.verficationCode.create({\r\n      data: {\r\n        userId: id,\r\n        code: rand,\r\n        action: 'EMAIL_VERIFICATION'\r\n      }\r\n    });\r\n\r\n    const mailResponse = await default_transporter.sendMail({\r\n      from: 'RCN Global Network',\r\n      to: user.email,\r\n      subject: 'Email verification code',\r\n      html: `<p>This is your verification code. It will expire in 15 minutes.</p><strong>${otp.code}</strong>`,\r\n      replyTo: 'noreply@rcn.com'\r\n    });\r\n\r\n    return res.status(200).json({\r\n      message: 'Verification code sent to email address',\r\n      userId: id\r\n    });\r\n  },\r\n\r\n  async verifyEmail(req: Request<{}, {}, Verify>, res) {\r\n    const {code} = req.body;\r\n\r\n    const {id} = req.user;\r\n\r\n    const codeExists = await prisma.verficationCode.findUnique({\r\n      where: {userId_action: {userId: id, action: 'EMAIL_VERIFICATION'}}\r\n    });\r\n\r\n    if (!codeExists)\r\n      throw createHttpError(403, 'Code expired, request new code');\r\n\r\n    if (codeExists.code !== code)\r\n      throw createHttpError(403, 'Invalid code, retry');\r\n\r\n    await prisma.user.update({\r\n      where: {id},\r\n      data: {emailVerified: true}\r\n    });\r\n\r\n    await prisma.verficationCode.delete({where: {id: codeExists.id}});\r\n\r\n    return res.status(200).send('Email verification successful');\r\n  },\r\n\r\n  //TODO Implement resending verification email flow\r\n  async resendVerificationCode(req, res) {\r\n    return res.status(200).json('Okay');\r\n  },\r\n\r\n  async login(req: Request<{}, {}, Login, {admin: string}>, res) {\r\n    const {email, password} = req.body;\r\n\r\n    const {admin} = req.query;\r\n\r\n    const user = await prisma.user.findUnique({where: {email}});\r\n\r\n    if (!user) throw createHttpError(403, 'Invalid email or password');\r\n\r\n    if (admin == 'true' && user.role != 'ADMIN')\r\n      throw createHttpError(403, 'Unknown Error Occured');\r\n\r\n    const validPassword = await compare(password, user.password);\r\n\r\n    if (!validPassword) throw createHttpError(403, 'Invalid email or password');\r\n\r\n    if (!user.emailVerified)\r\n      throw createHttpError(403, 'Please verify your email');\r\n\r\n    const token = v4();\r\n    const twoWeeks = new Date(new Date().getTime() + 14 * 24 * 60 * 60 * 1000);\r\n\r\n    //Authentication token to expire after two weeks\r\n    const authToken = await prisma.authToken.create({\r\n      data: {\r\n        userId: user.id,\r\n        token,\r\n        expiresAt: twoWeeks\r\n      }\r\n    });\r\n\r\n    const {password: _, emailVerified, role, updatedAt, ...rest} = user;\r\n\r\n    //Todo Add other parameters to cookie\r\n    if (user.role == 'ADMIN') {\r\n      return res\r\n        .cookie('rcn.session.token', authToken.token, {\r\n          signed: true,\r\n          maxAge: 1000 * 60 * 60 * 24 * 14\r\n        })\r\n        .status(200)\r\n        .send('Login successful');\r\n    } else {\r\n      res.setHeader('Authorization', `Bearer ${authToken.token}`);\r\n    }\r\n\r\n    return res.status(200).json({message: 'Log in success', user: rest});\r\n  },\r\n\r\n  async sendPasswordResetMail(req: Request<{}, {}, ResetPasswordMail>, res) {\r\n    const {email} = req.body;\r\n\r\n    const user = await prisma.user.findUnique({where: {email}});\r\n\r\n    if (!user) throw createHttpError(403, 'User not found');\r\n\r\n    const rand = crypto.randomInt(1000, 9999).toString();\r\n\r\n    const otp = await prisma.verficationCode.create({\r\n      data: {\r\n        userId: user.id,\r\n        code: rand,\r\n        action: 'PASSWORD_RESET'\r\n      }\r\n    });\r\n\r\n    if (!otp) throw createHttpError(403, 'Could not create verification code');\r\n\r\n    const mailResponse = await default_transporter.sendMail({\r\n      from: 'RCN Global Network',\r\n      to: user.email,\r\n      subject: 'Password reset code',\r\n      html: `<p>This is your password reset code. It expires in 15 minutes.</p><strong>${otp.code}</strong>`,\r\n      replyTo: 'noreply@rcn.com'\r\n    });\r\n\r\n    return res.status(200).json('Password reset code sent to your mail');\r\n  },\r\n\r\n  async verifyPasswordResetCode(req: Request<{}, {}, Verify>, res) {\r\n    const {code, userId} = req.body;\r\n\r\n    const otp = await prisma.verficationCode.findFirst({\r\n      where: {code, userId, action: 'PASSWORD_RESET'}\r\n    });\r\n\r\n    if (!otp) throw createHttpError(403, 'Code expired, request new code');\r\n\r\n    if (code !== otp.code)\r\n      throw createHttpError(403, 'Invalid code, try again');\r\n\r\n    return res.status(200).json('Verified');\r\n  },\r\n\r\n  async changePassword(req: Request<{}, {}, ChangePassword>, res) {\r\n    const {password} = req.body;\r\n\r\n    const {id} = req.user;\r\n\r\n    const hashedPW = await hash(password, 10);\r\n\r\n    await prisma.user.update({where: {id}, data: {password: hashedPW}});\r\n\r\n    return res.status(200).json('Password changed');\r\n  },\r\n\r\n  //Todo Add rate mimiter to stop after two requests if uploading image\r\n  async updateAccount(req: Request<{}, {}, UserSchema>, res) {\r\n    const {id} = req.user;\r\n\r\n    let data = req.body;\r\n\r\n    if (req.file) {\r\n      const {buffer} = req.file;\r\n      if (req.user.avi.public_id) {\r\n        await cloudinary.uploader.destroy(req.user.avi.public_id, {\r\n          invalidate: true\r\n        });\r\n        await prisma.user.update({where: {id}, data: {avi: null}});\r\n      }\r\n      const response = await uploadBuffer(buffer, 'image', 'vootv-api/pfps');\r\n      const {secure_url, public_id} = response;\r\n      data = {...req.body, avi: {secure_url, public_id}};\r\n    }\r\n\r\n    await prisma.user.update({where: {id}, data});\r\n\r\n    return res.status(200).json('Account details updated');\r\n  },\r\n\r\n  async logout(req, res) {\r\n    await req.logout();\r\n\r\n    res.status(200).send('Logout successful');\r\n  }\r\n});\r\n","import app from './app.config';\r\nimport env from './util/env';\r\n\r\nconst PORT = env.PORT;\r\n\r\napp.listen(PORT, () => console.log('Listening on PORT ' + PORT));\r\n","import createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\nimport {asyncWrapper, Controller} from '../util/requestHandler.config';\r\nimport {Request} from 'express';\r\n\r\nconst logout = asyncWrapper(async (req, res, next) => {\r\n  req.logout = async () => {\r\n    const {authorization} = req.headers;\r\n\r\n    const token =\r\n      authorization?.split(' ')[1] || req.signedCookies['rcn.session.token'];\r\n\r\n    if (!token) return true;\r\n\r\n    const authToken = await prisma.authToken.findUnique({where: {token}});\r\n\r\n    if (!authToken) return true;\r\n\r\n    const user = await prisma.user.findUnique({where: {id: authToken.userId}});\r\n\r\n    await prisma.authToken.delete({where: {token: authToken.token}});\r\n\r\n    return true;\r\n  };\r\n  res.clearCookie('rcn.session.token');\r\n  next();\r\n});\r\n\r\ntype ID = {userId: string};\r\n\r\ntype MiddlewareRequest = Request<ID, {}, ID>;\r\n\r\n/**Checks request body or params and verifies user */\r\nconst verifyUser = asyncWrapper(async (req: MiddlewareRequest, res, next) => {\r\n  const userId = req.body.userId || req.params.userId;\r\n\r\n  if (!userId) throw createHttpError(403, 'Invalid ID');\r\n\r\n  const user = await prisma.user.findUnique({where: {id: userId}});\r\n\r\n  if (!user) throw createHttpError(404, 'User not found');\r\n\r\n  req.user = user;\r\n\r\n  next();\r\n});\r\n\r\n/**Authenticates user or admin through headers in request or cookie for admin */\r\nconst authenticate = Controller({\r\n  async user(req, res, next) {\r\n    const {authorization} = req.headers;\r\n\r\n    const token = authorization?.split(' ')[1];\r\n\r\n    if (!token) throw createHttpError(401, 'Unauthorized');\r\n\r\n    const authToken = await prisma.authToken.findUnique({where: {token}});\r\n\r\n    if (!authToken) throw createHttpError(401, 'Session expired');\r\n\r\n    const user = await prisma.user.findUnique({where: {id: authToken.userId}});\r\n\r\n    if (!user) throw createHttpError(404, 'User not found');\r\n\r\n    const twoWeeks = new Date(new Date().getTime() + 14 * 24 * 60 * 60 * 1000);\r\n\r\n    await prisma.authToken.update({\r\n      where: {userId: user.id},\r\n      data: {expiresAt: twoWeeks}\r\n    });\r\n\r\n    req.user = user;\r\n\r\n    next();\r\n  },\r\n\r\n  admin: async (req, res, next) => {\r\n    const token = req.signedCookies['rcn.session.token'];\r\n\r\n    if (!token) throw createHttpError(401, 'Unauthorized');\r\n\r\n    const authToken = await prisma.authToken.findUnique({where: {token}});\r\n\r\n    if (!authToken) {\r\n      res.clearCookie('rcn.session.token');\r\n\r\n      throw createHttpError(401, 'Session expired');\r\n    }\r\n\r\n    const user = await prisma.user.findUnique({where: {id: authToken.userId}});\r\n\r\n    if (!user) throw createHttpError(401, 'User not found');\r\n\r\n    if (user.role != 'ADMIN') throw createHttpError(401, 'Unauthorized');\r\n\r\n    const twoWeeks = new Date(new Date().getTime() + 14 * 24 * 60 * 60 * 1000);\r\n\r\n    await prisma.authToken.update({\r\n      where: {userId: user.id},\r\n      data: {expiresAt: twoWeeks}\r\n    });\r\n\r\n    req.user = user;\r\n\r\n    next();\r\n  }\r\n});\r\n\r\nexport {verifyUser, authenticate, logout};\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/audio';\r\nimport multer from 'multer';\r\n\r\nconst upload = multer({storage: multer.memoryStorage()});\r\n\r\nconst router = Router();\r\n\r\n//Todo Authenticate as user before sending\r\nrouter.get('/', controller.getAudios);\r\n\r\nrouter.get('/:id', controller.getAudio);\r\n\r\n//Todo Authenticate as admin before posting\r\nrouter.post('/', upload.single('audio'), controller.addAudio);\r\n\r\nrouter.delete('/:id', controller.deleteAudio);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/download'\r\n\r\nconst router = Router();\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/location';\r\nimport {authenticate} from '../middlewares/auth';\r\n\r\nconst router = Router();\r\n\r\n//Todo Authenticate user\r\nrouter.get('/', controller.getLocations);\r\n\r\nrouter.get('/:id', controller.getLocation);\r\n\r\nrouter.post('/', authenticate.admin, controller.addLocation);\r\n\r\nrouter.patch('/:id', authenticate.admin, controller.updateLocation);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/program';\r\nimport {authenticate} from '../middlewares/auth';\r\nimport multer from 'multer';\r\n\r\nconst {admin} = authenticate\r\n\r\nconst upload = multer({storage: multer.memoryStorage()});\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/', controller.getPrograms);\r\n\r\nrouter.get('/:id', controller.getProgram);\r\n\r\nrouter.post('/', admin, upload.single('banner'), controller.addProgram);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/service';\r\n\r\nconst router = Router();\r\n\r\nrouter.post('/:locationId', controller.addService);\r\n\r\n//Todo Patch function\r\nrouter.patch('/:id');\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/stream';\r\n\r\nconst router = Router();\r\n\r\nrouter.post('/', controller.addStream);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/testimony';\r\nimport {authenticate} from '../middlewares/auth';\r\n\r\nconst router = Router();\r\n\r\nrouter.use(authenticate.user);\r\n\r\nrouter.get('/', controller.getTestimonies);\r\n\r\nrouter.get('/:id', controller.getTestimony);\r\n\r\nrouter.post('/', controller.addTestimony);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/user';\r\nimport {authenticate, verifyUser, logout} from '../middlewares/auth';\r\nimport multer from 'multer';\r\n\r\nconst {user, admin} = authenticate;\r\n\r\nconst upload = multer({storage: multer.memoryStorage()});\r\n\r\nconst router = Router();\r\n\r\nrouter.use(logout);\r\n\r\nrouter.get('/', admin, controller.getUsers);\r\n\r\nrouter.get('/:id', admin, controller.getUser);\r\n\r\nrouter.post('/register', controller.register);\r\n\r\nrouter.post('/login', controller.login);\r\n\r\nrouter.patch('/account-info', user, upload.single('avi'), controller.updateAccount);\r\n\r\nrouter.post('/password-reset-mail', controller.sendPasswordResetMail);\r\n\r\nrouter.post('/verify-password-reset', controller.verifyPasswordResetCode);\r\n\r\nrouter.put('/reset-password', verifyUser, controller.changePassword);\r\n\r\nrouter.post('/verify-email', verifyUser, controller.verifyEmail);\r\n\r\n// router.get('/resend-email-verify-code', controller.resendVerificationCode);\r\n\r\nrouter.post('/logout', controller.logout);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport {v4} from 'uuid';\r\n// import redisClient from '../util/ioredis';\r\n// import {myQueue} from '../util/worker';\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/', (req, res) => {\r\n  const token = v4();\r\n  res.send(token);\r\n});\r\n\r\n// router.post('/redis', async (req, res) => {\r\n//   await redisClient.set('buyStatus', 'disabled');\r\n//   const buyStatus = await redisClient.get('buyStatus');\r\n//   console.log(buyStatus);\r\n//   res.status(200).json('okay');\r\n// });\r\n\r\n// router.post('/queue', async (req, res) => {\r\n//   await myQueue.add('test', {foo: 'bar'}, {delay: 5000});\r\n//   await myQueue.add('test', {foo: 'bar'}, {delay: 5000});\r\n//   // await myQueue.add('test', {foo: 'bar'});\r\n//   // await myQueue.add('test', {foo: 'bar'});\r\n//   // await myQueue.add('test', {foo: 'bar'});\r\n//   res.status(200).json('Job added');\r\n// });\r\n\r\nexport default router;\r\n","import streamifier from 'streamifier';\r\nimport {UploadApiResponse, v2 as cloudinary} from 'cloudinary';\r\nimport env from './env';\r\n\r\ncloudinary.config({\r\n  cloud_name: env.CLOUD_NAME,\r\n  api_key: env.CLOUD_API_KEY,\r\n  api_secret: env.CLOUD_API_SECRET,\r\n  secure: true\r\n});\r\n\r\n// resource_type: 'raw' //to accept other type of files\r\nexport type ResourceType = 'image' | 'video' | 'raw' | 'auto';\r\n\r\ntype UploadBuffer = (\r\n  fileBuffer: Buffer,\r\n  resourceType: ResourceType,\r\n  folder: string\r\n) => Promise<UploadApiResponse>;\r\n\r\nconst uploadBuffer: UploadBuffer = (fileBuffer, resourceType, folder) => {\r\n  return new Promise((resolve, reject) => {\r\n    const stream = cloudinary.uploader.upload_stream(\r\n      {folder, resource_type: resourceType},\r\n      (error, result) => {\r\n        if (error) reject(error);\r\n        else resolve(result);\r\n      }\r\n    );\r\n    streamifier.createReadStream(fileBuffer).pipe(stream);\r\n  });\r\n};\r\n\r\nexport {cloudinary, uploadBuffer};\r\n","import {PrismaClient} from '@prisma/client';\r\n\r\nlet prisma: PrismaClient;\r\n\r\ndeclare global {\r\n  var __prisma: PrismaClient | undefined;\r\n}\r\n\r\nif (!global.__prisma) {\r\n  global.__prisma = new PrismaClient();\r\n}\r\n\r\nprisma = global.__prisma;\r\n\r\nexport default prisma;\r\n","import {cleanEnv, email, port, str} from 'envalid';\r\n\r\nexport default cleanEnv(process.env, {\r\n  PORT: port(),\r\n  JWT_SECRET: str(),\r\n  ADMIN_EMAIL: email(),\r\n  ADMIN_PASSWORD: str(),\r\n  CLOUD_NAME: str(),\r\n  CLOUD_API_KEY: str(),\r\n  CLOUD_API_SECRET: str(),\r\n  COOKIE_SECRET: str(),\r\n  ADMIN_CLIENT_URL: str()\r\n});\r\n","import nodemailer from 'nodemailer';\r\nimport path from 'path';\r\nimport hbs from 'nodemailer-express-handlebars';\r\nimport env from '../util/env';\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  service: 'gmail',\r\n  port: 465,\r\n  secure: true,\r\n  auth: {\r\n    user: env.ADMIN_EMAIL,\r\n    pass: env.ADMIN_PASSWORD\r\n  }\r\n});\r\n\r\nexport {transporter as default_transporter};\r\n\r\nconst handlebarOptions: hbs.NodemailerExpressHandlebarsOptions = {\r\n  viewEngine: {\r\n    extname: '.handlebars',\r\n    partialsDir: path.resolve(__dirname, '../views/partials'),\r\n    defaultLayout: false\r\n  },\r\n  viewPath: path.resolve(__dirname, '../views'),\r\n  extName: '.handlebars'\r\n};\r\n\r\ntransporter.use('compile', hbs(handlebarOptions));\r\n\r\nexport default transporter;\r\n","import {Request, Response, NextFunction} from 'express';\r\n\r\nexport type CustomRequestHandler<T = any> = (\r\n  req: Request,\r\n  res: Response,\r\n  next?: NextFunction,\r\n  ...rest: T[]\r\n) => Promise<void | Response>;\r\n\r\nexport const asyncWrapper = (fn: CustomRequestHandler) => {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await fn(req, res, next);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n};\r\n\r\n/* Request params, {}, Request body, Request query */\r\n\r\nexport const Controller = <T extends {[K in keyof T]: CustomRequestHandler}>(\r\n  controllers: T\r\n) => {\r\n  for (let key of Object.keys(controllers)) {\r\n    controllers[key] = asyncWrapper(controllers[key]);\r\n  }\r\n  return controllers;\r\n};\r\n","module.exports = require(\"@prisma/client\");","module.exports = require(\"bcryptjs\");","module.exports = require(\"cloudinary\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv/config\");","module.exports = require(\"envalid\");","module.exports = require(\"express\");","module.exports = require(\"helmet\");","module.exports = require(\"http-errors\");","module.exports = require(\"morgan\");","module.exports = require(\"multer\");","module.exports = require(\"nodemailer\");","module.exports = require(\"nodemailer-express-handlebars\");","module.exports = require(\"streamifier\");","module.exports = require(\"uuid\");","module.exports = require(\"crypto\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(156);\n"],"names":["app","use","devMode","get","origin","ADMIN_CLIENT_URL","credentials","json","urlencoded","extended","COOKIE_SECRET","req","res","status","send","next","error","console","errorMessage","statusCode","isHttpError","message","Controller","getAudios","audios","audio","findMany","getAudio","id","params","findUnique","where","addAudio","title","preacher","timeRecorded","body","file","fileBuffer","buffer","response","uploadBuffer","secure_url","public_id","bytes","create","data","link","Date","size","cloudId","deleteAudio","audioDeleted","delete","cloudinary","uploader","destroy","invalidate","resource_type","addLocation","country","state","pastorInCharge","location","country_state_pastorInCharge","getLocations","locations","getLocation","include","services","updateLocation","locationId","rest","update","addProgram","startTime","endTime","program","banner","getPrograms","programs","getProgram","addService","theme","day","service","theme_day","updateService","addStream","stream","addTestimony","testimony","userId","user","getTestimonies","testimonies","getTestimony","getUsers","users","role","getUser","select","register","email","password","phoneNumber","findFirst","OR","hashedPW","hash","_email","rand","randomInt","toString","otp","verficationCode","code","action","default_transporter","sendMail","from","to","subject","html","replyTo","verifyEmail","codeExists","userId_action","emailVerified","resendVerificationCode","login","admin","query","compare","token","v4","twoWeeks","getTime","authToken","expiresAt","_","updatedAt","cookie","signed","maxAge","setHeader","sendPasswordResetMail","verifyPasswordResetCode","changePassword","updateAccount","avi","logout","PORT","listen","log","asyncWrapper","authorization","headers","split","signedCookies","clearCookie","verifyUser","authenticate","upload","storage","memoryStorage","router","Router","post","single","patch","put","config","cloud_name","CLOUD_NAME","api_key","CLOUD_API_KEY","api_secret","CLOUD_API_SECRET","secure","resourceType","folder","Promise","resolve","reject","upload_stream","result","createReadStream","pipe","prisma","global","__prisma","PrismaClient","cleanEnv","process","env","port","JWT_SECRET","str","ADMIN_EMAIL","ADMIN_PASSWORD","transporter","createTransport","auth","pass","handlebarOptions","viewEngine","extname","partialsDir","__dirname","defaultLayout","viewPath","extName","fn","controllers","key","Object","keys","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}