{"version":3,"file":"index.js","mappings":"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","sources":["webpack://vootv-api/./src/app.config.ts","webpack://vootv-api/./src/controllers/audio.ts","webpack://vootv-api/./src/controllers/download.ts","webpack://vootv-api/./src/controllers/location.ts","webpack://vootv-api/./src/controllers/program.ts","webpack://vootv-api/./src/controllers/service.ts","webpack://vootv-api/./src/controllers/stream.ts","webpack://vootv-api/./src/controllers/testimony.ts","webpack://vootv-api/./src/controllers/user.ts","webpack://vootv-api/./src/index.ts","webpack://vootv-api/./src/middlewares/auth.ts","webpack://vootv-api/./src/routes/audio.ts","webpack://vootv-api/./src/routes/download.ts","webpack://vootv-api/./src/routes/location.ts","webpack://vootv-api/./src/routes/program.ts","webpack://vootv-api/./src/routes/service.ts","webpack://vootv-api/./src/routes/stream.ts","webpack://vootv-api/./src/routes/testimony.ts","webpack://vootv-api/./src/routes/user.ts","webpack://vootv-api/./src/test/index.ts","webpack://vootv-api/./src/util/cloudinary.config.ts","webpack://vootv-api/./src/util/db.connection.ts","webpack://vootv-api/./src/util/env.ts","webpack://vootv-api/./src/util/nodemailer.config.ts","webpack://vootv-api/./src/util/requestHandler.config.ts","webpack://vootv-api/external commonjs \"@prisma/client\"","webpack://vootv-api/external commonjs \"bcryptjs\"","webpack://vootv-api/external commonjs \"cloudinary\"","webpack://vootv-api/external commonjs \"cookie-parser\"","webpack://vootv-api/external commonjs \"cors\"","webpack://vootv-api/external commonjs \"dotenv/config\"","webpack://vootv-api/external commonjs \"envalid\"","webpack://vootv-api/external commonjs \"express\"","webpack://vootv-api/external commonjs \"helmet\"","webpack://vootv-api/external commonjs \"http-errors\"","webpack://vootv-api/external commonjs \"morgan\"","webpack://vootv-api/external commonjs \"multer\"","webpack://vootv-api/external commonjs \"nodemailer\"","webpack://vootv-api/external commonjs \"nodemailer-express-handlebars\"","webpack://vootv-api/external commonjs \"streamifier\"","webpack://vootv-api/external commonjs \"uuid\"","webpack://vootv-api/external node-commonjs \"crypto\"","webpack://vootv-api/external node-commonjs \"path\"","webpack://vootv-api/webpack/bootstrap","webpack://vootv-api/webpack/startup"],"sourcesContent":["import 'dotenv/config';\r\nimport express, {Request, Response, NextFunction} from 'express';\r\nimport morgan from 'morgan';\r\nimport cors from 'cors';\r\nimport helmet from 'helmet';\r\nimport cookieParser from 'cookie-parser';\r\nimport createHttpError, {isHttpError} from 'http-errors';\r\nimport userRoutes from './routes/user';\r\nimport audioRoutes from './routes/audio';\r\nimport locationRoutes from './routes/location';\r\nimport serviceRoutes from './routes/service';\r\nimport testimonyRoutes from './routes/testimony';\r\nimport streamRoutes from './routes/stream';\r\nimport downloadRoutes from './routes/download';\r\nimport programRoutes from './routes/program';\r\nimport testRoutes from './test';\r\nimport env from './util/env';\r\n\r\nconst homeMessage = `\r\n<div style=\"display: flex; align-items: center; justify-content: center; height: 90vh\"> \r\n<h1 style=\"font-size: 72px; background: -webkit-linear-gradient(45deg, #09009f, #00ff95 80%); -webkit-background-clip: text;\r\n-webkit-text-fill-color: transparent;\">VOO TV REST API</h1>\r\n</div>\r\n`;\r\n\r\nconst app = express();\r\n\r\napp.use(helmet());\r\n\r\napp.use(morgan('dev'));\r\n\r\napp.use(cors({origin: [env.ADMIN_CLIENT_URL], credentials: true}));\r\n\r\napp.use(cookieParser(env.COOKIE_SECRET));\r\n\r\napp.use(express.json());\r\n\r\napp.use(express.urlencoded({extended: true}));\r\n\r\napp.get('/', (req, res) => res.status(200).send(homeMessage));\r\napp.use('/user', userRoutes);\r\napp.use('/audio', audioRoutes);\r\napp.use('/location', locationRoutes);\r\napp.use('/service', serviceRoutes);\r\napp.use('/testimony', testimonyRoutes);\r\napp.use('/stream', streamRoutes);\r\napp.use('/download', downloadRoutes);\r\napp.use('/program', programRoutes);\r\n\r\n//? FOR TESTS\r\napp.use('/tests', testRoutes);\r\n\r\n//Not found\r\napp.use((req, res, next) => next(createHttpError(404, 'Endpoint not found')));\r\n\r\n//Error Middleware\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\napp.use((error: unknown, req: Request, res: Response, next: NextFunction) => {\r\n  console.error(error);\r\n  let errorMessage = 'An unknown error occurred';\r\n  let statusCode = 500;\r\n  //Todo Handle prisma invalid id error\r\n  if (isHttpError(error)) {\r\n    statusCode = error.status;\r\n    errorMessage = error.message;\r\n  }\r\n  res.status(statusCode).json(errorMessage);\r\n});\r\n\r\nexport default app;\r\n","import {Controller} from '../util/requestHandler.config';\r\nimport createHttpError from 'http-errors';\r\nimport {uploadBuffer, cloudinary} from '../util/cloudinary.config';\r\nimport {Request} from 'express';\r\nimport prisma from '../util/db.connection';\r\n\r\ninterface Audio {\r\n  title: string;\r\n  timeRecorded: Date;\r\n  preacher: string;\r\n}\r\n\r\nexport default Controller({\r\n  async getAudios(req, res) {\r\n    const audios = await prisma.audio.findMany({\r\n      include: {streams: {select: {id: true}}, downloads: {select: {id: true}}}\r\n    });\r\n\r\n    res.status(200).json(audios);\r\n  },\r\n\r\n  async getAudio(req: Request<{id: string}>, res) {\r\n    const {id} = req.params;\r\n\r\n    const audio = await prisma.audio.findUnique({\r\n      where: {id},\r\n      include: {\r\n        streams: {include: {user: {select: {fullName: true}}}},\r\n        downloads: {include: {user: {select: {fullName: true}}}}\r\n      }\r\n    });\r\n\r\n    if (!audio) throw createHttpError(\"Audio doesn't exist\");\r\n\r\n    return res.status(200).json(audio);\r\n  },\r\n\r\n  //Todo Trim inputs\r\n  async addAudio(req: Request<{}, {}, Audio>, res) {\r\n    //Attach information in form\r\n    const {title, preacher, timeRecorded} = req.body;\r\n\r\n    if (!req.file) throw createHttpError(403, 'No file received');\r\n\r\n    // Get the uploaded file buffer and name\r\n    const fileBuffer = req.file.buffer;\r\n\r\n    const response = await uploadBuffer(fileBuffer, 'auto', 'vootv-api/audios');\r\n\r\n    const {secure_url, public_id, bytes} = response;\r\n\r\n    await prisma.audio.create({\r\n      data: {\r\n        link: secure_url,\r\n        preacher,\r\n        timeRecorded: new Date(timeRecorded),\r\n        size: bytes,\r\n        cloudId: public_id,\r\n        title\r\n      }\r\n    });\r\n\r\n    res.status(201).json('Audio added');\r\n  },\r\n\r\n  async deleteAudio(req: Request<{id: string}>, res) {\r\n    const {id} = req.params;\r\n\r\n    const audio = await prisma.audio.findUnique({where: {id}});\r\n\r\n    if (!audio) throw createHttpError(404, 'Audio not found');\r\n\r\n    const audioDeleted = await prisma.audio.delete({where: {id: audio.id}});\r\n\r\n    if (!audioDeleted)\r\n      throw createHttpError('Could not delete audio, try again later');\r\n\r\n    await cloudinary.uploader.destroy(audioDeleted.cloudId, {\r\n      invalidate: true,\r\n      resource_type: 'video'\r\n    });\r\n    // {result: 'not found'; }| {  result: 'ok';}\r\n\r\n    return res.status(200).json('Audio deleted');\r\n  }\r\n});\r\n","import {Controller} from '../util/requestHandler.config';\r\nimport {Request} from 'express';\r\nimport createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\n\r\ninterface Download {\r\n  userId: string;\r\n  audioId: string;\r\n  status: 'COMPLETED' | 'ONGOING' | 'FAILED';\r\n}\r\n\r\nexport default Controller({\r\n  async addDownload(req: Request<{}, {}, Download>, res) {\r\n    await prisma.download.create({data: req.body});\r\n\r\n    res.status(201).send('Download saved');\r\n  }\r\n});\r\n","import {Request} from 'express';\r\nimport {Controller} from '../util/requestHandler.config';\r\nimport createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\ninterface LocationBody {\r\n  country: string;\r\n  state: string;\r\n  address: string;\r\n  pastorInCharge: string;\r\n  mapLocation?: {longitude: number; latitude: number};\r\n}\r\n\r\nexport default Controller({\r\n  async addLocation(req: Request<{}, {}, LocationBody>, res) {\r\n    const {country, state, pastorInCharge} = req.body;\r\n\r\n    const locationExists = await prisma.location.findUnique({\r\n      where: {country_state_pastorInCharge: {country, state, pastorInCharge}}\r\n    });\r\n\r\n    if (locationExists) throw createHttpError(403, 'Location exists');\r\n\r\n    await prisma.location.create({data: req.body});\r\n\r\n    return res.status(201).send('New location added');\r\n  },\r\n\r\n  async getLocations(req, res) {\r\n    const locations = await prisma.location.findMany();\r\n\r\n    return res.status(200).json(locations);\r\n  },\r\n\r\n  async getLocation(req: Request<{id: string}>, res) {\r\n    const {id} = req.params;\r\n\r\n    const location = await prisma.location.findUnique({\r\n      where: {id},\r\n      include: {services: true}\r\n    });\r\n\r\n    if (!location) throw createHttpError('Location does not exist');\r\n\r\n    return res.status(200).json(location);\r\n  },\r\n\r\n  async updateLocation(req: Request<{id: string}, {}, LocationBody>, res) {\r\n    const {id} = req.params;\r\n\r\n    const location = await prisma.location.findUnique({where: {id}});\r\n\r\n    if (!location) throw createHttpError(403, 'Location not found');\r\n\r\n    const {id: locationId, ...rest} = location;\r\n\r\n    await prisma.location.update({\r\n      where: {id: location.id},\r\n      data: {...rest, ...req.body}\r\n    });\r\n\r\n    return res.status(200).send('Location details updated');\r\n  }\r\n});\r\n","import {Controller} from '../util/requestHandler.config';\r\nimport {Request} from 'express';\r\nimport createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\nimport {uploadBuffer, cloudinary} from '../util/cloudinary.config';\r\n\r\ntype ProgramType = 'PROGRAM' | 'EVENT';\r\ninterface Program {\r\n  locationId: string;\r\n  theme: string;\r\n  startTime: Date;\r\n  endTime: Date;\r\n  additionalInfo: string;\r\n  type: ProgramType;\r\n  banner: {secure_url: string; public_id: string};\r\n}\r\n\r\nexport default Controller({\r\n  async addProgram(req: Request<{}, {}, Program>, res) {\r\n    req.body.startTime = new Date(req.body.startTime);\r\n    req.body.endTime = new Date(req.body.endTime);\r\n\r\n    if (!req.file) {\r\n      throw createHttpError(403, 'No Image added');\r\n    }\r\n\r\n    const {buffer} = req.file;\r\n\r\n    const response = await uploadBuffer(buffer, 'image', 'vootv-api/banners');\r\n\r\n    const {secure_url, public_id} = response;\r\n\r\n    await prisma.program.create({\r\n      data: {...req.body, banner: {secure_url, public_id}}\r\n    });\r\n\r\n    return res.status(201).send('Program Added successfully');\r\n  },\r\n\r\n  async getPrograms(req, res) {\r\n    const programs = await prisma.program.findMany({\r\n      include: {location: {select: {state: true, country: true}}}\r\n    });\r\n\r\n    return res.status(200).json(programs);\r\n  },\r\n\r\n  async getProgram(req: Request<{id: string}>, res) {\r\n    const {id} = req.params;\r\n\r\n    const program = await prisma.program.findUnique({where: {id}});\r\n\r\n    return res.status(200).json(program);\r\n  },\r\n\r\n  async updateProgram(req: Request<{id: string}, {}, Program>, res) {\r\n    const {id} = req.params;\r\n\r\n    const program = await prisma.program.findUnique({where: {id}});\r\n\r\n    if (!program) throw createHttpError(404, 'Program doesnt exist');\r\n\r\n    req.body.startTime = new Date(req.body.startTime);\r\n    req.body.endTime = new Date(req.body.endTime);\r\n\r\n    //? Delete picture in cloudinary and add new one if picture is sent\r\n    if (req.file) {\r\n      await cloudinary.uploader.destroy(program.banner.public_id, {\r\n        invalidate: true,\r\n        resource_type: 'image'\r\n      });\r\n\r\n      const buffer = req.file.buffer;\r\n\r\n      const response = await uploadBuffer(buffer, 'image', 'vootv-api/banners');\r\n\r\n      const {secure_url, public_id} = response;\r\n\r\n      req.body.banner = {secure_url, public_id};\r\n    }\r\n\r\n    const {id: programId, ...rest} = program;\r\n\r\n    await prisma.program.update({\r\n      where: {id: program.id},\r\n      data: {...rest, ...req.body}\r\n    });\r\n\r\n    res.status(200).send('Updated successfully');\r\n  },\r\n\r\n  async deleteProgram(req: Request<{id: string}>, res) {\r\n    const {id} = req.params;\r\n\r\n    const program = await prisma.program.findUnique({where: {id}});\r\n\r\n    if (!program) throw createHttpError(404, 'Audio not found');\r\n\r\n    const deleted = await prisma.program.delete({where: {id: program.id}});\r\n\r\n    if (!deleted)\r\n      throw createHttpError('Could not delete program, try again later');\r\n\r\n    await cloudinary.uploader.destroy(deleted.banner.public_id, {\r\n      invalidate: true,\r\n      resource_type: 'image'\r\n    });\r\n    // {result: 'not found'; }| {  result: 'ok';}\r\n\r\n    return res.status(200).json('Program deleted');\r\n  }\r\n});\r\n","import {Controller} from '../util/requestHandler.config';\r\nimport {Request} from 'express';\r\nimport createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\n\r\ninterface ServiceBody {\r\n  day: string;\r\n  startTimes: string[];\r\n  theme: string;\r\n}\r\n\r\nexport default Controller({\r\n  async addService(req: Request<{locationId: string}, {}, ServiceBody>, res) {\r\n    const {theme, day} = req.body;\r\n    const {locationId} = req.params;\r\n\r\n    const location = await prisma.location.findUnique({\r\n      where: {id: locationId}\r\n    });\r\n\r\n    if (!location) throw createHttpError(404, 'Location not found');\r\n\r\n    const serviceExists = await prisma.service.findUnique({\r\n      where: {theme_day: {theme, day}}\r\n    });\r\n\r\n    if (serviceExists)\r\n      throw createHttpError(403, 'Service exists, update to continue');\r\n\r\n    await prisma.service.create({data: {...req.body, locationId}});\r\n\r\n    return res.status(201).send(`Service added for RCN ${location.state}`);\r\n  },\r\n  async updateService() {}\r\n});\r\n","import {Controller} from '../util/requestHandler.config';\r\nimport {Request} from 'express';\r\nimport createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\n\r\ninterface Stream {\r\n  userId: string;\r\n  audioId: string;\r\n  duration: number;\r\n}\r\n\r\nexport default Controller({\r\n  async addStream(req: Request<{}, {}, Stream>, res) {\r\n    await prisma.stream.create({data: req.body});\r\n    \r\n    return res.status(201).send('Stream added');\r\n  }\r\n});\r\n","import {Request} from 'express';\r\nimport {Controller} from '../util/requestHandler.config';\r\nimport createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\n\r\ninterface Testimony {\r\n  title: string;\r\n  content: string;\r\n}\r\n\r\nexport default Controller({\r\n  async addTestimony(req: Request<{}, {}, Testimony>, res) {\r\n    \r\n    await prisma.testimony.create({\r\n      data: {...req.body, userId: req.user.id}\r\n    });\r\n\r\n    return res.status(201).send('Testimony added');\r\n  },\r\n\r\n  async getTestimonies(req, res) {\r\n    const testimonies = await prisma.testimony.findMany();\r\n\r\n    return res.status(201).json(testimonies);\r\n  },\r\n\r\n  async getTestimony(req: Request<{id: string}>, res) {\r\n    const {id} = req.params;\r\n    \r\n    const testimony = await prisma.testimony.findUnique({where: {id}});\r\n\r\n    if (!testimony) throw createHttpError(404, 'Testimony not found');\r\n\r\n    return res.status(200).json(testimony);\r\n  }\r\n});\r\n","import express, {Request} from 'express';\r\nimport {Controller} from '../util/requestHandler.config';\r\nimport {hash, compare} from 'bcryptjs';\r\nimport createHttpError from 'http-errors';\r\nimport crypto from 'crypto';\r\nimport {v4} from 'uuid';\r\nimport {default_transporter} from '../util/nodemailer.config';\r\nimport prisma from '../util/db.connection';\r\nimport {cloudinary, uploadBuffer} from '../util/cloudinary.config';\r\nimport env from '../util/env';\r\n\r\nconst app = express();\r\ninterface UserSchema {\r\n  email: string;\r\n  fullName: string;\r\n  password: string;\r\n  phoneNumber: string;\r\n  dateOfBirth?: Date;\r\n  locationId?: string;\r\n  avi?: {secure_url: string; public_id: string};\r\n}\r\n\r\ninterface Verify {\r\n  code: string;\r\n  userId: string;\r\n}\r\n\r\ntype ResetPasswordMail = Pick<UserSchema, 'email'>;\r\n\r\ntype ChangePassword = {password: string; userId: string};\r\n\r\ntype Login = Pick<UserSchema, 'email' | 'password'>;\r\n\r\nexport default Controller({\r\n  async getUsers(req, res) {\r\n    const users = await prisma.user.findMany({where: {role: 'USER'}});\r\n\r\n    return res.status(200).json(users);\r\n  },\r\n\r\n  async getUser(req: Request<{id: string}>, res) {\r\n    const {id} = req.params;\r\n\r\n    const user = await prisma.user.findUnique({\r\n      where: {id},\r\n      include: {location: {select: {state: true}}}\r\n    });\r\n\r\n    return res.status(200).json(user);\r\n  },\r\n\r\n  async register(req: Request<{}, {}, UserSchema>, res) {\r\n    const {email, password, phoneNumber} = req.body;\r\n\r\n    const exists = await prisma.user.findFirst({\r\n      where: {OR: [{email}, {phoneNumber}]}\r\n    });\r\n\r\n    if (exists)\r\n      throw createHttpError(403, 'Account already exists, please login');\r\n\r\n    const hashedPW = await hash(password, 10);\r\n\r\n    //* Add role of user by default\r\n    const user = await prisma.user.create({\r\n      data: {...req.body, password: hashedPW, role: 'USER'}\r\n    });\r\n\r\n    const {email: _email, id} = user;\r\n\r\n    const rand = crypto.randomInt(1000, 9999).toString();\r\n\r\n    const otp = await prisma.verficationCode.create({\r\n      data: {\r\n        userId: id,\r\n        code: rand,\r\n        action: 'EMAIL_VERIFICATION'\r\n      }\r\n    });\r\n\r\n    const mailResponse = await default_transporter.sendMail({\r\n      from: 'RCN Global Network',\r\n      to: user.email,\r\n      subject: 'Email verification code',\r\n      html: `<p>This is your verification code. It will expire in 15 minutes.</p><strong>${otp.code}</strong>`,\r\n      replyTo: 'noreply@rcn.com'\r\n    });\r\n\r\n    return res.status(200).json({\r\n      message: 'Verification code sent to email address',\r\n      userId: id\r\n    });\r\n  },\r\n\r\n  async verifyEmail(req: Request<{}, {}, Verify>, res) {\r\n    const {code} = req.body;\r\n\r\n    const {id} = req.user;\r\n\r\n    const codeExists = await prisma.verficationCode.findUnique({\r\n      where: {userId_action: {userId: id, action: 'EMAIL_VERIFICATION'}}\r\n    });\r\n\r\n    if (!codeExists)\r\n      throw createHttpError(403, 'Code expired, request new code');\r\n\r\n    if (codeExists.code !== code)\r\n      throw createHttpError(403, 'Invalid code, retry');\r\n\r\n    await prisma.user.update({\r\n      where: {id},\r\n      data: {emailVerified: true}\r\n    });\r\n\r\n    await prisma.verficationCode.delete({where: {id: codeExists.id}});\r\n\r\n    return res.status(200).send('Email verification successful');\r\n  },\r\n\r\n  //TODO Implement resending verification email flow\r\n  async resendVerificationCode(req, res) {\r\n    return res.status(200).json('Okay');\r\n  },\r\n\r\n  async login(req: Request<{}, {}, Login, {admin: string}>, res) {\r\n    const {email, password} = req.body;\r\n\r\n    const {admin} = req.query;\r\n\r\n    const user = await prisma.user.findUnique({where: {email}});\r\n\r\n    if (!user) throw createHttpError(403, 'Invalid email or password');\r\n\r\n    if (admin == 'true' && user.role != 'ADMIN')\r\n      throw createHttpError(403, 'Unknown Error Occured');\r\n\r\n    const validPassword = await compare(password, user.password);\r\n\r\n    if (!validPassword) throw createHttpError(403, 'Invalid email or password');\r\n\r\n    if (!user.emailVerified)\r\n      throw createHttpError(403, 'Please verify your email');\r\n\r\n    const token = v4();\r\n    const twoWeeks = new Date(new Date().getTime() + 14 * 24 * 60 * 60 * 1000);\r\n\r\n    //Authentication token to expire after two weeks\r\n    const authToken = await prisma.authToken.create({\r\n      data: {\r\n        userId: user.id,\r\n        token,\r\n        expiresAt: twoWeeks\r\n      }\r\n    });\r\n\r\n    const {password: _, emailVerified, role, updatedAt, ...rest} = user;\r\n\r\n    //Todo Add other parameters to cookie\r\n    if (user.role == 'ADMIN') {\r\n      return res\r\n        .cookie('rcn.session.token', authToken.token, {\r\n          signed: true,\r\n          maxAge: 1000 * 60 * 60 * 24 * 14,\r\n          sameSite: 'none',\r\n          secure: true\r\n        })\r\n        .status(200)\r\n        .send('Login successful');\r\n    } else {\r\n      res.setHeader('Authorization', `Bearer ${authToken.token}`);\r\n    }\r\n\r\n    return res.status(200).json({message: 'Log in success', user: rest});\r\n  },\r\n\r\n  async sendPasswordResetMail(req: Request<{}, {}, ResetPasswordMail>, res) {\r\n    const {email} = req.body;\r\n\r\n    const user = await prisma.user.findUnique({where: {email}});\r\n\r\n    if (!user) throw createHttpError(403, 'User not found');\r\n\r\n    const rand = crypto.randomInt(1000, 9999).toString();\r\n\r\n    const otp = await prisma.verficationCode.create({\r\n      data: {\r\n        userId: user.id,\r\n        code: rand,\r\n        action: 'PASSWORD_RESET'\r\n      }\r\n    });\r\n\r\n    if (!otp) throw createHttpError(403, 'Could not create verification code');\r\n\r\n    const mailResponse = await default_transporter.sendMail({\r\n      from: 'RCN Global Network',\r\n      to: user.email,\r\n      subject: 'Password reset code',\r\n      html: `<p>This is your password reset code. It expires in 15 minutes.</p><strong>${otp.code}</strong>`,\r\n      replyTo: 'noreply@rcn.com'\r\n    });\r\n\r\n    return res.status(200).json('Password reset code sent to your mail');\r\n  },\r\n\r\n  async verifyPasswordResetCode(req: Request<{}, {}, Verify>, res) {\r\n    const {code, userId} = req.body;\r\n\r\n    const otp = await prisma.verficationCode.findFirst({\r\n      where: {code, userId, action: 'PASSWORD_RESET'}\r\n    });\r\n\r\n    if (!otp) throw createHttpError(403, 'Code expired, request new code');\r\n\r\n    if (code !== otp.code)\r\n      throw createHttpError(403, 'Invalid code, try again');\r\n\r\n    return res.status(200).json('Verified');\r\n  },\r\n\r\n  async changePassword(req: Request<{}, {}, ChangePassword>, res) {\r\n    const {password} = req.body;\r\n\r\n    const {id} = req.user;\r\n\r\n    const hashedPW = await hash(password, 10);\r\n\r\n    await prisma.user.update({where: {id}, data: {password: hashedPW}});\r\n\r\n    return res.status(200).json('Password changed');\r\n  },\r\n\r\n  //Todo Add rate mimiter to stop after two requests if uploading image\r\n  async updateAccount(req: Request<{}, {}, UserSchema>, res) {\r\n    const {id} = req.user;\r\n\r\n    let data = req.body;\r\n\r\n    if (req.file) {\r\n      const {buffer} = req.file;\r\n      if (req.user.avi.public_id) {\r\n        await cloudinary.uploader.destroy(req.user.avi.public_id, {\r\n          invalidate: true\r\n        });\r\n        await prisma.user.update({where: {id}, data: {avi: null}});\r\n      }\r\n      const response = await uploadBuffer(buffer, 'image', 'vootv-api/pfps');\r\n      const {secure_url, public_id} = response;\r\n      data = {...req.body, avi: {secure_url, public_id}};\r\n    }\r\n\r\n    await prisma.user.update({where: {id}, data});\r\n\r\n    return res.status(200).json('Account details updated');\r\n  },\r\n\r\n  async logout(req, res) {\r\n    await req.logout();\r\n\r\n    res.status(200).send('Logout successful');\r\n  }\r\n});\r\n","import app from './app.config';\r\nimport env from './util/env';\r\n\r\nconst PORT = env.PORT;\r\n\r\napp.listen(PORT, () => console.log('Listening on PORT ' + PORT));\r\n","import createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\nimport {asyncWrapper, Controller} from '../util/requestHandler.config';\r\nimport {Request} from 'express';\r\n\r\nconst logout = asyncWrapper(async (req, res, next) => {\r\n  req.logout = async () => {\r\n    const {authorization} = req.headers;\r\n\r\n    const token =\r\n      authorization?.split(' ')[1] || req.signedCookies['rcn.session.token'];\r\n\r\n    if (!token) return true;\r\n\r\n    const authToken = await prisma.authToken.findUnique({where: {token}});\r\n\r\n    if (!authToken) return true;\r\n\r\n    await prisma.authToken.delete({where: {token: authToken.token}});\r\n\r\n    res.clearCookie('rcn.session.token', {\r\n      signed: true,\r\n      sameSite: 'none',\r\n      secure: true\r\n    });\r\n\r\n    return true;\r\n  };\r\n  next();\r\n});\r\n\r\ntype ID = {userId: string};\r\n\r\ntype MiddlewareRequest = Request<ID, {}, ID>;\r\n\r\n/**Checks request body or params and verifies user */\r\nconst verifyUser = asyncWrapper(async (req: MiddlewareRequest, res, next) => {\r\n  const userId = req.body.userId || req.params.userId;\r\n\r\n  if (!userId) throw createHttpError(403, 'Invalid ID');\r\n\r\n  const user = await prisma.user.findUnique({where: {id: userId}});\r\n\r\n  if (!user) throw createHttpError(404, 'User not found');\r\n\r\n  req.user = user;\r\n\r\n  next();\r\n});\r\n\r\n/**Authenticates user or admin through headers in request or cookie for admin */\r\nconst authenticate = Controller({\r\n  async user(req, res, next) {\r\n    const {authorization} = req.headers;\r\n\r\n    const token = authorization?.split(' ')[1];\r\n\r\n    if (!token) throw createHttpError(401, 'Unauthorized');\r\n\r\n    const authToken = await prisma.authToken.findUnique({where: {token}});\r\n\r\n    if (!authToken) throw createHttpError(401, 'Session expired');\r\n\r\n    const user = await prisma.user.findUnique({where: {id: authToken.userId}});\r\n\r\n    if (!user) throw createHttpError(404, 'User not found');\r\n\r\n    const twoWeeks = new Date(new Date().getTime() + 14 * 24 * 60 * 60 * 1000);\r\n\r\n    await prisma.authToken.update({\r\n      where: {token: authToken.token},\r\n      data: {expiresAt: twoWeeks}\r\n    });\r\n\r\n    req.user = user;\r\n\r\n    next();\r\n  },\r\n\r\n  admin: async (req: Request<{}, {}, {}, {admin: string}>, res, next) => {\r\n    const token = req.signedCookies['rcn.session.token'];\r\n\r\n    if (!token) throw createHttpError(401, 'Unauthorized, no token');\r\n\r\n    const authToken = await prisma.authToken.findUnique({where: {token}});\r\n\r\n    if (!authToken) {\r\n      res.clearCookie('rcn.session.token', {\r\n        signed: true,\r\n        sameSite: 'none',\r\n        secure: true\r\n      });\r\n\r\n      throw createHttpError(401, 'Session expired');\r\n    }\r\n\r\n    const user = await prisma.user.findUnique({where: {id: authToken.userId}});\r\n\r\n    if (!user) throw createHttpError(401, 'User not found');\r\n\r\n    if (user.role != 'ADMIN')\r\n      throw createHttpError(401, 'Unauthorized, not an admin');\r\n\r\n    const twoWeeks = new Date(new Date().getTime() + 14 * 24 * 60 * 60 * 1000);\r\n\r\n    await prisma.authToken.update({\r\n      where: {token: authToken.token},\r\n      data: {expiresAt: twoWeeks}\r\n    });\r\n\r\n    if (req.query.admin) return res.status(200).send('Authenticated');\r\n\r\n    req.user = user;\r\n\r\n    next();\r\n  }\r\n});\r\n\r\nexport {verifyUser, authenticate, logout};\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/audio';\r\nimport multer from 'multer';\r\nimport { authenticate } from '../middlewares/auth';\r\n\r\nconst upload = multer({storage: multer.memoryStorage()});\r\n\r\nconst router = Router();\r\n\r\n//Todo Authenticate as user before sending\r\nrouter.get('/', authenticate.admin, controller.getAudios);\r\n\r\nrouter.get('/:id', controller.getAudio);\r\n\r\n//Todo Authenticate as admin before posting\r\nrouter.post('/', upload.single('audio'), controller.addAudio);\r\n\r\nrouter.delete('/:id', controller.deleteAudio);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/download';\r\n\r\nconst router = Router();\r\n\r\nrouter.post('/', controller.addDownload);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/location';\r\nimport {authenticate} from '../middlewares/auth';\r\n\r\nconst router = Router();\r\n\r\n//Todo Authenticate user\r\nrouter.get('/', controller.getLocations);\r\n\r\nrouter.get('/:id', controller.getLocation);\r\n\r\nrouter.post('/', authenticate.admin, controller.addLocation);\r\n\r\nrouter.patch('/:id', authenticate.admin, controller.updateLocation);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/program';\r\nimport {authenticate} from '../middlewares/auth';\r\nimport multer from 'multer';\r\n\r\nconst {admin} = authenticate;\r\n\r\nconst upload = multer({storage: multer.memoryStorage()});\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/', controller.getPrograms);\r\n\r\nrouter.get('/:id', controller.getProgram);\r\n\r\nrouter.post('/', admin, upload.single('banner'), controller.addProgram);\r\n\r\nrouter.delete('/:id', controller.deleteProgram);\r\n\r\nrouter.patch('/:id', upload.single('banner'), controller.updateProgram);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/service';\r\n\r\nconst router = Router();\r\n\r\nrouter.post('/:locationId', controller.addService);\r\n\r\n//Todo Patch function\r\nrouter.patch('/:id');\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/stream';\r\n\r\nconst router = Router();\r\n\r\nrouter.post('/', controller.addStream);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/testimony';\r\nimport {authenticate} from '../middlewares/auth';\r\n\r\nconst router = Router();\r\n\r\nrouter.use(authenticate.user);\r\n\r\nrouter.get('/', controller.getTestimonies);\r\n\r\nrouter.get('/:id', controller.getTestimony);\r\n\r\nrouter.post('/', controller.addTestimony);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/user';\r\nimport {authenticate, verifyUser, logout} from '../middlewares/auth';\r\nimport multer from 'multer';\r\n\r\nconst {user, admin} = authenticate;\r\n\r\nconst upload = multer({storage: multer.memoryStorage()});\r\n\r\nconst router = Router();\r\n\r\nrouter.use(logout);\r\n\r\nrouter.get('/auth', authenticate.admin)\r\n\r\nrouter.get('/', admin, controller.getUsers);\r\n\r\nrouter.get('/:id', admin, controller.getUser);\r\n\r\nrouter.post('/register', controller.register);\r\n\r\nrouter.post('/login', controller.login);\r\n\r\nrouter.patch('/account-info', user, upload.single('avi'), controller.updateAccount);\r\n\r\nrouter.post('/password-reset-mail', controller.sendPasswordResetMail);\r\n\r\nrouter.post('/verify-password-reset', controller.verifyPasswordResetCode);\r\n\r\nrouter.put('/reset-password', verifyUser, controller.changePassword);\r\n\r\nrouter.post('/verify-email', verifyUser, controller.verifyEmail);\r\n\r\n// router.get('/resend-email-verify-code', controller.resendVerificationCode);\r\n\r\nrouter.post('/logout', controller.logout);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport {v4} from 'uuid';\r\n// import redisClient from '../util/ioredis';\r\n// import {myQueue} from '../util/worker';\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/', (req, res) => {\r\n  const token = v4();\r\n  res.send(token);\r\n});\r\n\r\n// router.post('/redis', async (req, res) => {\r\n//   await redisClient.set('buyStatus', 'disabled');\r\n//   const buyStatus = await redisClient.get('buyStatus');\r\n//   console.log(buyStatus);\r\n//   res.status(200).json('okay');\r\n// });\r\n\r\n// router.post('/queue', async (req, res) => {\r\n//   await myQueue.add('test', {foo: 'bar'}, {delay: 5000});\r\n//   await myQueue.add('test', {foo: 'bar'}, {delay: 5000});\r\n//   // await myQueue.add('test', {foo: 'bar'});\r\n//   // await myQueue.add('test', {foo: 'bar'});\r\n//   // await myQueue.add('test', {foo: 'bar'});\r\n//   res.status(200).json('Job added');\r\n// });\r\n\r\nexport default router;\r\n","import streamifier from 'streamifier';\r\nimport {UploadApiResponse, v2 as cloudinary} from 'cloudinary';\r\nimport env from './env';\r\n\r\ncloudinary.config({\r\n  cloud_name: env.CLOUD_NAME,\r\n  api_key: env.CLOUD_API_KEY,\r\n  api_secret: env.CLOUD_API_SECRET,\r\n  secure: true\r\n});\r\n\r\n// resource_type: 'raw' //to accept other type of files\r\nexport type ResourceType = 'image' | 'video' | 'raw' | 'auto';\r\n\r\ntype UploadBuffer = (\r\n  fileBuffer: Buffer,\r\n  resourceType: ResourceType,\r\n  folder: string\r\n) => Promise<UploadApiResponse>;\r\n\r\nconst uploadBuffer: UploadBuffer = (fileBuffer, resourceType, folder) => {\r\n  return new Promise((resolve, reject) => {\r\n    const stream = cloudinary.uploader.upload_stream(\r\n      {folder, resource_type: resourceType},\r\n      (error, result) => {\r\n        if (error) reject(error);\r\n        else resolve(result);\r\n      }\r\n    );\r\n    streamifier.createReadStream(fileBuffer).pipe(stream);\r\n  });\r\n};\r\n\r\nexport {cloudinary, uploadBuffer};\r\n","import {PrismaClient} from '@prisma/client';\r\n\r\nlet prisma: PrismaClient;\r\n\r\ndeclare global {\r\n  var __prisma: PrismaClient | undefined;\r\n}\r\n\r\nif (!global.__prisma) {\r\n  global.__prisma = new PrismaClient();\r\n}\r\n\r\nprisma = global.__prisma;\r\n\r\nexport default prisma;\r\n","import {cleanEnv, email, port, str} from 'envalid';\r\n\r\nexport default cleanEnv(process.env, {\r\n  PORT: port(),\r\n  JWT_SECRET: str(),\r\n  ADMIN_EMAIL: email(),\r\n  ADMIN_PASSWORD: str(),\r\n  CLOUD_NAME: str(),\r\n  CLOUD_API_KEY: str(),\r\n  CLOUD_API_SECRET: str(),\r\n  COOKIE_SECRET: str(),\r\n  ADMIN_CLIENT_URL: str()\r\n});\r\n","import nodemailer from 'nodemailer';\r\nimport path from 'path';\r\nimport hbs from 'nodemailer-express-handlebars';\r\nimport env from '../util/env';\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  service: 'gmail',\r\n  port: 465,\r\n  secure: true,\r\n  auth: {\r\n    user: env.ADMIN_EMAIL,\r\n    pass: env.ADMIN_PASSWORD\r\n  }\r\n});\r\n\r\nexport {transporter as default_transporter};\r\n\r\nconst handlebarOptions: hbs.NodemailerExpressHandlebarsOptions = {\r\n  viewEngine: {\r\n    extname: '.handlebars',\r\n    partialsDir: path.resolve(__dirname, '../views/partials'),\r\n    defaultLayout: false\r\n  },\r\n  viewPath: path.resolve(__dirname, '../views'),\r\n  extName: '.handlebars'\r\n};\r\n\r\ntransporter.use('compile', hbs(handlebarOptions));\r\n\r\nexport default transporter;\r\n","import {Request, Response, NextFunction} from 'express';\r\n\r\nexport type CustomRequestHandler<T = any> = (\r\n  req: Request,\r\n  res: Response,\r\n  next?: NextFunction,\r\n  ...rest: T[]\r\n) => Promise<void | Response>;\r\n\r\nexport const asyncWrapper = (fn: CustomRequestHandler) => {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await fn(req, res, next);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n};\r\n\r\n/* Request params, {}, Request body, Request query */\r\n\r\nexport const Controller = <T extends {[K in keyof T]: CustomRequestHandler}>(\r\n  controllers: T\r\n) => {\r\n  for (let key of Object.keys(controllers)) {\r\n    controllers[key] = asyncWrapper(controllers[key]);\r\n  }\r\n  return controllers;\r\n};\r\n","module.exports = require(\"@prisma/client\");","module.exports = require(\"bcryptjs\");","module.exports = require(\"cloudinary\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv/config\");","module.exports = require(\"envalid\");","module.exports = require(\"express\");","module.exports = require(\"helmet\");","module.exports = require(\"http-errors\");","module.exports = require(\"morgan\");","module.exports = require(\"multer\");","module.exports = require(\"nodemailer\");","module.exports = require(\"nodemailer-express-handlebars\");","module.exports = require(\"streamifier\");","module.exports = require(\"uuid\");","module.exports = require(\"crypto\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(156);\n"],"names":["app","use","origin","ADMIN_CLIENT_URL","credentials","COOKIE_SECRET","json","urlencoded","extended","get","req","res","status","send","next","error","console","errorMessage","statusCode","isHttpError","message","Controller","getAudios","audios","audio","findMany","include","streams","select","id","downloads","getAudio","params","findUnique","where","user","fullName","addAudio","title","preacher","timeRecorded","body","file","fileBuffer","buffer","response","uploadBuffer","secure_url","public_id","bytes","create","data","link","Date","size","cloudId","deleteAudio","audioDeleted","delete","cloudinary","uploader","destroy","invalidate","resource_type","addDownload","download","addLocation","country","state","pastorInCharge","location","country_state_pastorInCharge","getLocations","locations","getLocation","services","updateLocation","locationId","rest","update","addProgram","startTime","endTime","program","banner","getPrograms","programs","getProgram","updateProgram","programId","deleteProgram","deleted","addService","theme","day","service","theme_day","updateService","addStream","stream","addTestimony","testimony","userId","getTestimonies","testimonies","getTestimony","getUsers","users","role","getUser","register","email","password","phoneNumber","findFirst","OR","hashedPW","hash","_email","rand","randomInt","toString","otp","verficationCode","code","action","default_transporter","sendMail","from","to","subject","html","replyTo","verifyEmail","codeExists","userId_action","emailVerified","resendVerificationCode","login","admin","query","compare","token","v4","twoWeeks","getTime","authToken","expiresAt","_","updatedAt","cookie","signed","maxAge","sameSite","secure","setHeader","sendPasswordResetMail","verifyPasswordResetCode","changePassword","updateAccount","avi","logout","PORT","listen","log","asyncWrapper","authorization","headers","split","signedCookies","clearCookie","verifyUser","authenticate","upload","storage","memoryStorage","router","Router","post","single","patch","put","config","cloud_name","CLOUD_NAME","api_key","CLOUD_API_KEY","api_secret","CLOUD_API_SECRET","resourceType","folder","Promise","resolve","reject","upload_stream","result","createReadStream","pipe","prisma","global","__prisma","PrismaClient","cleanEnv","process","env","port","JWT_SECRET","str","ADMIN_EMAIL","ADMIN_PASSWORD","transporter","createTransport","auth","pass","handlebarOptions","viewEngine","extname","partialsDir","__dirname","defaultLayout","viewPath","extName","fn","controllers","key","Object","keys","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}