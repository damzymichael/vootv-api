{"version":3,"file":"index.js","mappings":"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","sources":["webpack://vootv-api/./src/app.config.ts","webpack://vootv-api/./src/controllers/audio.ts","webpack://vootv-api/./src/controllers/location.ts","webpack://vootv-api/./src/controllers/service.ts","webpack://vootv-api/./src/controllers/user.ts","webpack://vootv-api/./src/index.ts","webpack://vootv-api/./src/routes/audio.ts","webpack://vootv-api/./src/routes/location.ts","webpack://vootv-api/./src/routes/service.ts","webpack://vootv-api/./src/routes/user.ts","webpack://vootv-api/./src/test/index.ts","webpack://vootv-api/./src/util/db.connection.ts","webpack://vootv-api/./src/util/env.ts","webpack://vootv-api/./src/util/googleDrive.ts","webpack://vootv-api/./src/util/ioredis.ts","webpack://vootv-api/./src/util/nodemailer.config.ts","webpack://vootv-api/./src/util/requestHandler.config.ts","webpack://vootv-api/./src/util/worker.ts","webpack://vootv-api/external commonjs \"@prisma/client\"","webpack://vootv-api/external commonjs \"bcryptjs\"","webpack://vootv-api/external commonjs \"bullmq\"","webpack://vootv-api/external commonjs \"cors\"","webpack://vootv-api/external commonjs \"dotenv/config\"","webpack://vootv-api/external commonjs \"envalid\"","webpack://vootv-api/external commonjs \"express\"","webpack://vootv-api/external commonjs \"googleapis\"","webpack://vootv-api/external commonjs \"helmet\"","webpack://vootv-api/external commonjs \"http-errors\"","webpack://vootv-api/external commonjs \"ioredis\"","webpack://vootv-api/external commonjs \"morgan\"","webpack://vootv-api/external commonjs \"multer\"","webpack://vootv-api/external commonjs \"nodemailer\"","webpack://vootv-api/external commonjs \"nodemailer-express-handlebars\"","webpack://vootv-api/external node-commonjs \"crypto\"","webpack://vootv-api/external node-commonjs \"path\"","webpack://vootv-api/external node-commonjs \"stream\"","webpack://vootv-api/webpack/bootstrap","webpack://vootv-api/webpack/startup"],"sourcesContent":["import 'dotenv/config';\r\nimport express, {Request, Response, NextFunction} from 'express';\r\nimport morgan from 'morgan';\r\nimport cors from 'cors';\r\nimport helmet from 'helmet';\r\nimport createHttpError, {isHttpError} from 'http-errors';\r\nimport userRoutes from './routes/user';\r\nimport audioRoutes from './routes/audio';\r\nimport locationRoutes from './routes/location';\r\nimport serviceRoutes from './routes/service';\r\nimport testRoutes from './test';\r\n\r\nconst homeMessage = `\r\n  <div style=\"display: flex; align-items: center; justify-content: center; height: 90vh\"> \r\n    <h1 style=\"font-size: 72px; background: -webkit-linear-gradient(45deg, #09009f, #00ff95 80%); -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\">VOO TV REST API</h1>\r\n  </div>\r\n`;\r\n\r\nconst app = express();\r\n\r\napp.use(helmet());\r\n\r\nexport const devMode = app.get('env') === 'development';\r\n\r\nexport const BASE_URL = devMode ? 'http://localhost:5000/vootv' : '';\r\n\r\napp.use(morgan('dev'));\r\n\r\napp.use(cors());\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({extended: true}));\r\n\r\napp.get('/', (req, res) => res.status(200).send(homeMessage));\r\napp.use('/user', userRoutes);\r\napp.use('/audio', audioRoutes);\r\napp.use('/location', locationRoutes);\r\napp.use('/service', serviceRoutes);\r\n\r\n//? FOR TESTS\r\napp.use('/tests', testRoutes);\r\n\r\n//Not found\r\napp.use((req, res, next) => next(createHttpError(404, 'Endpoint not found')));\r\n\r\n//Error Middleware\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\napp.use((error: unknown, req: Request, res: Response, next: NextFunction) => {\r\n  console.error(error);\r\n  let errorMessage = 'An unknown error occurred';\r\n  let statusCode = 500;\r\n  if (isHttpError(error)) {\r\n    statusCode = error.status;\r\n    errorMessage = error.message;\r\n  }\r\n  res.status(statusCode).json(errorMessage);\r\n});\r\n\r\nexport default app;\r\n","import {Controller} from '../util/requestHandler.config';\r\nimport createHttpError from 'http-errors';\r\nimport {authorize, uploadFile} from '../util/googleDrive';\r\n\r\nexport default Controller({\r\n  async addAudio(req, res) {\r\n    if (!req.file) throw createHttpError(403, 'No file received');\r\n    // Get the uploaded file buffer and name\r\n    const fileBuffer = req.file.buffer;\r\n    const fileName = req.file.originalname;\r\n    const mimeType = req.file.mimetype;\r\n\r\n    const authClient = await authorize();\r\n\r\n    // Upload the file to Google Drive\r\n    const file = await uploadFile(authClient, fileBuffer, fileName, mimeType);\r\n\r\n    console.log(file);\r\n\r\n    console.log(file.data);\r\n\r\n    res.status(201).send('Okay');\r\n  }\r\n});\r\n","import {Request} from 'express';\r\nimport {Controller} from '../util/requestHandler.config';\r\nimport createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\ninterface LocationBody {\r\n  country: string;\r\n  state: string;\r\n  address: string;\r\n  pastorInCharge: string;\r\n  mapLocation?: {longitude: number; latitude: number};\r\n}\r\n\r\nexport default Controller({\r\n  async addLocation(req: Request<{}, {}, LocationBody>, res) {\r\n    const {country, state, pastorInCharge} = req.body;\r\n\r\n    const locationExists = await prisma.location.findUnique({\r\n      where: {country_state_pastorInCharge: {country, state, pastorInCharge}}\r\n    });\r\n\r\n    if (locationExists) throw createHttpError(403, 'Location exists');\r\n\r\n    await prisma.location.create({data: req.body});\r\n\r\n    return res.status(201).send('New location added');\r\n  },\r\n\r\n  async getLocations(req, res) {\r\n    const locations = await prisma.location.findMany();\r\n\r\n    res.status(200).json(locations);\r\n  },\r\n\r\n  async getLocation() {},\r\n\r\n  async updateLocation(req: Request<{id: string}, {}, LocationBody>, res) {\r\n    const {id} = req.params;\r\n\r\n    const location = await prisma.location.findUnique({where: {id}});\r\n\r\n    if (!location) throw createHttpError(403, 'Location not found');\r\n\r\n    await prisma.location.update({where: {id: location.id}, data: req.body});\r\n\r\n    return res.status(200).send('Location details updated');\r\n  }\r\n});\r\n","import {Controller} from '../util/requestHandler.config';\r\nimport {Request} from 'express';\r\nimport createHttpError from 'http-errors';\r\nimport prisma from '../util/db.connection';\r\n\r\ninterface ServiceBody {\r\n  day: string;\r\n  startTime: string;\r\n  endTime: string;\r\n  theme: string;\r\n  locationId: string;\r\n}\r\n\r\nexport default Controller({\r\n  async addService(req: Request<{}, {}, ServiceBody>, res) {\r\n    const {theme, day} = req.body;\r\n    const serviceExists = await prisma.service.findUnique({\r\n      where: {theme_day: {theme, day}}\r\n    });\r\n    //TODO Check if location of locationId exists\r\n    if (serviceExists)\r\n      throw createHttpError(403, 'Service exists, update to continue');\r\n\r\n    await prisma.service.create({data: req.body});\r\n\r\n    return res.status(201).send('Service added');\r\n  }\r\n});\r\n","import {Request} from 'express';\r\nimport {Controller} from '../util/requestHandler.config';\r\nimport {hash, compare} from 'bcryptjs';\r\nimport createHttpError from 'http-errors';\r\nimport crypto from 'crypto';\r\nimport {default_transporter} from '../util/nodemailer.config';\r\nimport prisma from '../util/db.connection';\r\n\r\ninterface Register {\r\n  email: string;\r\n  fullName: string;\r\n  password: string;\r\n  phoneNumber: string;\r\n}\r\n\r\ninterface Verify {\r\n  code: string;\r\n  userId: string;\r\n}\r\n\r\ntype ResetPasswordMail = Pick<Register, 'email'>;\r\n\r\ntype ChangePassword = {password: string; userId: string};\r\n\r\ntype Login = Pick<Register, 'email' | 'password'>;\r\n\r\n//TODO Refactor finding user into middleware\r\nexport default Controller({\r\n  async register(req: Request<{}, {}, Register>, res) {\r\n    const {email, password, phoneNumber} = req.body;\r\n\r\n    const exists = await prisma.user.findFirst({\r\n      where: {OR: [{email}, {phoneNumber}]}\r\n    });\r\n\r\n    if (exists)\r\n      throw createHttpError(403, 'Account already exists, please login');\r\n\r\n    const hashedPW = await hash(password, 10);\r\n\r\n    //* Add role of user by default\r\n    const user = await prisma.user.create({\r\n      data: {...req.body, password: hashedPW, role: 'USER'}\r\n    });\r\n\r\n    const {email: _email, id} = user;\r\n\r\n    const rand = crypto.randomInt(1000, 9999).toString();\r\n\r\n    const otp = await prisma.verficationCode.create({\r\n      data: {\r\n        userId: id,\r\n        code: rand,\r\n        action: 'EMAIL_VERIFICATION'\r\n      }\r\n    });\r\n\r\n    const mailResponse = await default_transporter.sendMail({\r\n      from: 'RCN Global Network',\r\n      to: user.email,\r\n      subject: 'Email verification code',\r\n      html: `<p>This is your verification code. It will expire in 15 minutes.</p><strong>${otp.code}</strong>`,\r\n      replyTo: 'noreply@rcn.com'\r\n    });\r\n\r\n    return res.status(200).json({\r\n      message: 'Verification code sent to email address',\r\n      userId: id\r\n    });\r\n  },\r\n\r\n  async verifyEmail(req: Request<any, any, Verify>, res) {\r\n    const {code, userId} = req.body;\r\n\r\n    const user = await prisma.user.findUnique({where: {id: userId}});\r\n\r\n    if (!user) throw createHttpError(404, 'User not found');\r\n\r\n    const codeExists = await prisma.verficationCode.findUnique({\r\n      where: {userId_action: {userId, action: 'EMAIL_VERIFICATION'}}\r\n    });\r\n\r\n    if (!codeExists)\r\n      throw createHttpError(403, 'Code expired, request new code');\r\n\r\n    if (codeExists.code !== code)\r\n      throw createHttpError(403, 'Invalid code, retry');\r\n\r\n    await prisma.user.update({\r\n      where: {id: user.id},\r\n      data: {emailVerified: true}\r\n    });\r\n\r\n    await prisma.verficationCode.delete({where: {id: codeExists.id}});\r\n\r\n    return res.status(200).send('Email verification successful');\r\n  },\r\n\r\n  //TODO Implement resending verification email flow\r\n  async resendVerificationCode(req, res) {\r\n    return res.status(200).json('Okay');\r\n  },\r\n\r\n  //TODO Implement session here\r\n  async login(req: Request<any, any, Login>, res) {\r\n    const {email, password} = req.body;\r\n\r\n    const user = await prisma.user.findUnique({where: {email}});\r\n\r\n    if (!user) throw createHttpError(403, 'Invalid email or password');\r\n\r\n    const validPassword = await compare(password, user.password);\r\n\r\n    if (!validPassword) throw createHttpError(403, 'Invalid email or password');\r\n\r\n    return res.status(200).json('Log in success');\r\n  },\r\n\r\n  async sendPasswordResetMail(req: Request<any, any, ResetPasswordMail>, res) {\r\n    const {email} = req.body;\r\n\r\n    const user = await prisma.user.findUnique({where: {email}});\r\n\r\n    if (!user) throw createHttpError(403, 'User not found');\r\n\r\n    const rand = crypto.randomInt(1000, 9999).toString();\r\n\r\n    const otp = await prisma.verficationCode.create({\r\n      data: {\r\n        userId: user.id,\r\n        code: rand,\r\n        action: 'PASSWORD_RESET'\r\n      }\r\n    });\r\n\r\n    if (!otp) throw createHttpError(403, 'Could not create verification code');\r\n\r\n    const mailResponse = await default_transporter.sendMail({\r\n      from: 'RCN Global Network',\r\n      to: user.email,\r\n      subject: 'Password reset code',\r\n      html: `<p>This is your password reset code. It expires in 15 minutes.</p><strong>${otp.code}</strong>`,\r\n      replyTo: 'noreply@rcn.com'\r\n    });\r\n\r\n    return res\r\n      .status(200)\r\n      .json('Check your email for your password reset code');\r\n  },\r\n\r\n  async verifyPasswordResetCode(req: Request<{}, {}, Verify>, res) {\r\n    const {code, userId} = req.body;\r\n    const otp = await prisma.verficationCode.findFirst({\r\n      where: {code, userId, action: 'PASSWORD_RESET'}\r\n    });\r\n\r\n    if (!otp) throw createHttpError(403, 'Code expired, request new code');\r\n\r\n    if (code !== otp.code)\r\n      throw createHttpError(403, 'Invalid code, try again');\r\n\r\n    return res.status(200).json('Verified');\r\n  },\r\n\r\n  async changePassword(req: Request<any, any, ChangePassword>, res) {\r\n    const {password, userId} = req.body;\r\n\r\n    const user = await prisma.user.findUnique({where: {id: userId}});\r\n\r\n    if (!user) throw createHttpError(403, 'User not found');\r\n\r\n    const hashedPW = await hash(password, 10);\r\n\r\n    await prisma.user.update({where: {id: userId}, data: {password: hashedPW}});\r\n\r\n    return res.status(200).json('Password changed');\r\n  }\r\n});\r\n","import app from './app.config';\r\nimport env from './util/env';\r\n\r\nconst PORT = env.PORT;\r\n\r\napp.listen(PORT, () => console.log('Listening on PORT ' + PORT));\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/audio';\r\nimport multer from 'multer';\r\n\r\nconst upload = multer({storage: multer.memoryStorage()});\r\n\r\nconst router = Router();\r\n\r\nrouter.post('/add', upload.single('audio'), controller.addAudio);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/location';\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/get-locations', controller.getLocations);\r\n\r\nrouter.get('/get-location/:id', controller.getLocation);\r\n\r\nrouter.post('/add-location', controller.addLocation);\r\n\r\nrouter.patch('/update-location/:id', controller.updateLocation);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/service';\r\n\r\nconst router = Router();\r\n\r\nrouter.post('/add-service', controller.addService);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport controller from '../controllers/user';\r\n\r\nconst router = Router();\r\n\r\nrouter.post('/register', controller.register);\r\n\r\nrouter.post('/verify-email', controller.verifyEmail);\r\n\r\nrouter.get('/resend-email-verify-code', controller.resendVerificationCode);\r\n\r\nexport default router;\r\n","import {Router} from 'express';\r\nimport redisClient from '../util/ioredis';\r\nimport {myQueue} from '../util/worker';\r\n\r\nconst router = Router();\r\n\r\nrouter.post('/redis', async (req, res) => {\r\n  await redisClient.set('buyStatus', 'disabled');\r\n  const buyStatus = await redisClient.get('buyStatus');\r\n  console.log(buyStatus);\r\n  res.status(200).json('okay');\r\n});\r\n\r\nrouter.post('/queue', async (req, res) => {\r\n  await myQueue.add('test', {foo: 'bar'}, {delay: 5000});\r\n  await myQueue.add('test', {foo: 'bar'}, {delay: 5000});\r\n  // await myQueue.add('test', {foo: 'bar'});\r\n  // await myQueue.add('test', {foo: 'bar'});\r\n  // await myQueue.add('test', {foo: 'bar'});\r\n  res.status(200).json('Job added');\r\n});\r\n\r\nexport default router;\r\n","import {PrismaClient} from '@prisma/client';\r\n\r\nlet prisma: PrismaClient;\r\n\r\ndeclare global {\r\n  var __prisma: PrismaClient | undefined;\r\n}\r\n\r\nif (!global.__prisma) {\r\n  global.__prisma = new PrismaClient();\r\n}\r\n\r\nprisma = global.__prisma;\r\n\r\nexport default prisma;\r\n","import {cleanEnv, email, port, str} from 'envalid';\r\n\r\nexport default cleanEnv(process.env, {\r\n  PORT: port(),\r\n  JWT_SECRET: str(),\r\n  ADMIN_EMAIL: email(),\r\n  ADMIN_PASSWORD: str(),\r\n  GOOGLE_DRIVE_CLIENT_EMAIL: str(),\r\n  GOOGLE_DRIVE_SECRET_KEY: str()\r\n});\r\n","import {google} from 'googleapis';\r\nimport {JWT} from 'google-auth-library';\r\nimport {Readable} from 'stream';\r\nimport env from './env';\r\n\r\nconst SCOPES = ['https://www.googleapis.com/auth/drive.file'];\r\n\r\nexport async function authorize(): Promise<JWT> {\r\n  const jwtClient = new google.auth.JWT(\r\n    env.GOOGLE_DRIVE_CLIENT_EMAIL,\r\n    null,\r\n    env.GOOGLE_DRIVE_SECRET_KEY.replace(/\\\\n/g, '\\n'), // Adjust newline characters\r\n    SCOPES\r\n  );\r\n\r\n  await jwtClient.authorize();\r\n  return jwtClient;\r\n}\r\n\r\nexport async function uploadFile(\r\n  authClient: JWT,\r\n  fileBuffer: Buffer,\r\n  fileName: string,\r\n  mimeType: string\r\n) {\r\n  const drive = google.drive({version: 'v3', auth: authClient});\r\n\r\n  const readableStream = Readable.from(fileBuffer);\r\n\r\n  const file = await drive.files.create({\r\n    requestBody: {\r\n      name: fileName, // File name on Google Drive\r\n      parents: ['1fi7fW0b3gW7-vS30KfgTLqW87l23cFnZ'] // id of folder on google drive\r\n    },\r\n    media: {\r\n      mimeType, // You can specify the MIME type if needed\r\n      body: readableStream\r\n    },\r\n    fields: 'id'\r\n  });\r\n\r\n  // Log the file ID\r\n  return file;\r\n}\r\n","import Redis from 'ioredis';\r\n\r\n//TODO Add production port\r\nconst redisClient = new Redis({maxRetriesPerRequest: null});\r\n\r\nexport default redisClient;\r\n","import nodemailer from 'nodemailer';\r\nimport path from 'path';\r\nimport hbs from 'nodemailer-express-handlebars';\r\nimport env from '../util/env';\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  service: 'gmail',\r\n  port: 465,\r\n  secure: true,\r\n  auth: {\r\n    user: env.ADMIN_EMAIL,\r\n    pass: env.ADMIN_PASSWORD\r\n  }\r\n});\r\n\r\nexport {transporter as default_transporter};\r\n\r\nconst handlebarOptions: hbs.NodemailerExpressHandlebarsOptions = {\r\n  viewEngine: {\r\n    extname: '.handlebars',\r\n    partialsDir: path.resolve(__dirname, '../views/partials'),\r\n    defaultLayout: false\r\n  },\r\n  viewPath: path.resolve(__dirname, '../views'),\r\n  extName: '.handlebars'\r\n};\r\n\r\ntransporter.use('compile', hbs(handlebarOptions));\r\n\r\nexport default transporter;\r\n","import {Request, Response, NextFunction} from 'express';\r\n\r\ntype RequestHandler = (\r\n  req: Request,\r\n  res: Response,\r\n  next?: NextFunction\r\n) => Promise<void | Response>;\r\n\r\nconst asyncWrapper = (fn: RequestHandler) => {\r\n  return async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      await fn(req, res, next);\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  };\r\n};\r\n\r\n/* \r\nRequest params\r\nidk the second\r\nRequest body\r\nRequest query\r\n*/\r\n\r\nexport const Controller = <T extends {[K in keyof T]: RequestHandler}>(\r\n  controllers: T\r\n) => {\r\n  for (let key of Object.keys(controllers)) {\r\n    controllers[key] = asyncWrapper(controllers[key]);\r\n  }\r\n  return controllers;\r\n};\r\n","import {Queue, Worker} from 'bullmq';\r\nimport redisClient from './ioredis';\r\n\r\nconst myQueue = new Queue('firstQueue', {connection: redisClient});\r\n\r\nconst worker = new Worker(\r\n  'firstQueue',\r\n  async job => {\r\n    // Process the job here\r\n    console.log('Processing job:', job.data);\r\n\r\n    // Simulate job processing\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    // Return the result of the job (if any)\r\n    console.log('Job processed');\r\n    return {success: true};\r\n  },\r\n  {connection: redisClient}\r\n);\r\n\r\nexport {myQueue, worker};\r\n","module.exports = require(\"@prisma/client\");","module.exports = require(\"bcryptjs\");","module.exports = require(\"bullmq\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv/config\");","module.exports = require(\"envalid\");","module.exports = require(\"express\");","module.exports = require(\"googleapis\");","module.exports = require(\"helmet\");","module.exports = require(\"http-errors\");","module.exports = require(\"ioredis\");","module.exports = require(\"morgan\");","module.exports = require(\"multer\");","module.exports = require(\"nodemailer\");","module.exports = require(\"nodemailer-express-handlebars\");","module.exports = require(\"crypto\");","module.exports = require(\"path\");","module.exports = require(\"stream\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(156);\n"],"names":["app","use","devMode","get","BASE_URL","json","urlencoded","extended","req","res","status","send","next","error","console","errorMessage","statusCode","isHttpError","message","Controller","addAudio","file","fileBuffer","buffer","fileName","originalname","mimeType","mimetype","authClient","authorize","uploadFile","log","data","addLocation","country","state","pastorInCharge","body","location","findUnique","where","country_state_pastorInCharge","create","getLocations","locations","findMany","getLocation","updateLocation","id","params","update","addService","theme","day","service","theme_day","register","email","password","phoneNumber","user","findFirst","OR","hashedPW","hash","role","_email","rand","randomInt","toString","otp","verficationCode","userId","code","action","default_transporter","sendMail","from","to","subject","html","replyTo","verifyEmail","codeExists","userId_action","emailVerified","delete","resendVerificationCode","login","compare","sendPasswordResetMail","verifyPasswordResetCode","changePassword","PORT","listen","upload","storage","memoryStorage","router","Router","post","single","patch","set","buyStatus","myQueue","add","foo","delay","prisma","global","__prisma","PrismaClient","cleanEnv","process","env","port","JWT_SECRET","str","ADMIN_EMAIL","ADMIN_PASSWORD","GOOGLE_DRIVE_CLIENT_EMAIL","GOOGLE_DRIVE_SECRET_KEY","SCOPES","jwtClient","google","auth","JWT","replace","drive","version","readableStream","Readable","files","requestBody","name","parents","media","fields","redisClient","maxRetriesPerRequest","transporter","createTransport","secure","pass","handlebarOptions","viewEngine","extname","partialsDir","resolve","__dirname","defaultLayout","viewPath","extName","asyncWrapper","fn","controllers","key","Object","keys","Queue","connection","worker","Worker","job","Promise","setTimeout","success","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}